{"filter":false,"title":"psgo.js","tooltip":"/chat-plugins/psgo.js","undoManager":{"mark":0,"position":0,"stack":[[{"start":{"row":0,"column":0},"end":{"row":935,"column":0},"action":"remove","lines":["'use strict';","/********************"," * Cards"," * Origins's Card System: Credit to Naten, nineage, fender, and everyone who added cards/ sparkychild for trading, searching, transfering of cards"," * All cards should be retrieved here http://www.pokemon.com/us/pokemon-tcg/pokemon-cards/"," * Cards are organized alphabetically and use a point system"," * publicids are dex numbers and any unique identifiers (if they're not a Pokemon, do a shorthand version of the card name)"," * Dex Number, (for multiple pokemon: DEX[lowercase letter, a, b, c, d])","********************/","const uuid = require('uuid');","const cards = require('./card-data.js');","let color = require('../config/color');","","const colors = {","\tMythic: '#D82A2A',","\tLegendary: '#E8AB03',","\tEpic: '#73DF14',","\tRare: '#2DD1B6',","\tUncommon: '#2D3ED1',","\tCommon: '#000',","};","","const shop = [","\t['XY-Base', 'Get three cards from the first pack released in the Pokemon XY set.', 10],","\t['XY-Flashfire', 'Get three cards from the Flashfire pack released in the Pokemon XY set.', 10],","\t['XY-Furious Fists', 'Get three cards from the Furious Fists pack released in the Pokemon XY set.', 10],","\t['XY-Phantom Forces', 'Get three cards from the Phantom Forces pack released in the Pokemon XY set.', 10],","\t['XY-Primal Clash', 'Get three cards from the Primal Clash pack released in the Pokemon XY set.', 10],","\t['XY-Roaring Skies', 'Get three cards from the Roaring Skies pack released in the Pokemon XY set.', 10],","\t['XY-Ancient Origins', 'Get three cards from the Ancient Origins pack released in the Pokemon XY set.', 10],","\t['XY-Generations', 'Get three cards from the Generations pack released in the Pokemon XY set.', 10]","];","let packShop = ['XY-Base', 'XY-Flashfire', 'XY-Furious Fists', 'XY-Phantom Forces', 'XY-Primal Clash', 'XY-Roaring Skies', 'XY-Ancient Origins', 'XY-Generations', 'Double Crisis', 'Water', 'Fire', 'Fighting', 'Fairy', 'Dragon', 'Colorless', 'Psychic', 'Lightning', 'Darkness', 'Grass', 'OU-Pack', 'UU-Pack', 'Uber-Pack', 'PU-Pack', 'NU-Pack', 'RU-Pack', 'LC-Pack', 'BL-Pack', 'BL2-Pack', 'BL3-Pack', 'Gen1', 'Gen2', 'Gen3', 'Gen4', 'Gen5', 'Gen6', 'Metal', 'Trainer', 'Supporter', 'Item', 'Stadium', 'EX-Pack', 'Legendary', 'Full', 'Event'];","const tourCardRarity = ['No Card', 'Common', 'Uncommon', 'Rare', 'Epic', 'Epic', 'Legendary', 'Legendary', 'Mythic'];","const cardRarity = ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary', 'Mythic'];","let cleanShop = [];","let cleanCard = [];","let rareCache = []; //Used to cache cards for tours","let cardCache = []; //Used to cache cards in packs","let userPacks = {}; //Used to store users unopened packs","","function cachePacks() {","\tfor (let i = 0; i < packShop.length; i++) {","\t\tcardCache.push([]);","\t\tfor (let key in cards) {","\t\t\tif (cards.hasOwnProperty(key)) {","\t\t\t\tlet obj = cards[key];","\t\t\t\tif (obj.hasOwnProperty('collection') && obj.collection.indexOf(packShop[i]) > -1) cardCache[i].push(key);","\t\t\t}","\t\t}","\t}","\tfor (let i = 0; i < packShop.length; i++) {","\t\tcleanShop.push(toId(packShop[i]));","\t}","}","","function cacheRarity() {","\tfor (let i = 0; i < cardRarity.length; i++) {","\t\trareCache.push([]);","\t\tfor (let key in cards) {","\t\t\tif (cards.hasOwnProperty(key)) {","\t\t\t\tlet obj = cards[key];","\t\t\t\tif (obj.hasOwnProperty('rarity') && obj.rarity.indexOf(cardRarity[i]) > -1) rareCache[i].push(key);","\t\t\t}","\t\t}","\t}","\tfor (let i = 0; i < cardRarity.length; i++) {","\t\tcleanCard.push(toId(cardRarity[i]));","\t}","}","","global.tourCard = function (tourSize, userid) {","\tif (tourSize > 32) tourSize = 32;","\tlet tourRarity = tourCardRarity[Math.floor(tourSize / 2)];","\tlet cacheValue = rareCache[cleanCard.indexOf(toId(tourRarity))];","\tlet card = cacheValue[Math.round(Math.random() * (cacheValue.length - 1))];","\tif (tourRarity === 'No Card') return;","\taddCard(userid, card);","\treturn [colors[cards[card].rarity], cards[card].rarity, cards[card].title, cards[card].name];","};","","function addCard(name, card) {","\tlet newCard = {};","\tnewCard.id = uuid.v1();","\tnewCard.title = cards[card].title;","\tnewCard.card = cards[card].card;","\tnewCard.name = cards[card].name;","\tnewCard.rarity = cards[card].rarity;","\tnewCard.points = cards[card].points;","","\tlet userid = toId(name);","\tDb('cards').set(userid, Db('cards').get(userid, []).concat([newCard]));","\tDb('points').set(userid, Db('points').get(userid, 0) + newCard.points);","}","","function removeCard(cardTitle, userid) {","\tlet userCards = Db('cards').get(userid, []);","\tlet idx = -1;","\t// search for index of the card","\tfor (let i = 0; i < userCards.length; i++) {","\t\tlet card = userCards[i];","\t\tif (card.title === cardTitle) {","\t\t\tidx = i;","\t\t\tbreak;","\t\t}","\t}","\tif (idx === -1) return false;","\t// remove it","\tuserCards.splice(idx, 1);","\t// set it in db","\tDb('cards').set(userid, userCards);","\treturn true;","}","","function getPointTotal(userid) {","\tlet totalCards = Db('cards').get(userid, []);","\tlet total = 0;","\tfor (let i = 0; i < totalCards.length; i++) {","\t\ttotal += totalCards[i].points;","\t}","\treturn total;","}","","function rankLadder(title, type, array, prop, group) { //Will clean up someday (tm)","\tlet groupHeader = group || 'Username';","\tconst ladderTitle = '<center><h4><u>' + title + '</u></h4></center>';","\tconst thStyle = 'class=\"rankladder-headers default-td\" style=\"background: -moz-linear-gradient(#576468, #323A3C); background: -webkit-linear-gradient(#576468, #323A3C); background: -o-linear-gradient(#576468, #323A3C); background: linear-gradient(#576468, #323A3C); box-shadow: -1px -1px 2px rgba(0, 0, 0, 0.3) inset, 1px 1px 1px rgba(255, 255, 255, 0.7) inset;\"';","\tconst tableTop = '<div style=\"max-height: 310px; overflow-y: scroll;\">' +","\t\t'<table style=\"width: 100%; border-collapse: collapse;\">' +","\t\t'<tr>' +","\t\t\t'<th ' + thStyle + '>Rank</th>' +","\t\t\t'<th ' + thStyle + '>' + groupHeader + '</th>' +","\t\t\t'<th ' + thStyle + '>' + type + '</th>' +","\t\t'</tr>';","\tconst tableBottom = '</table></div>';","\tconst tdStyle = 'class=\"rankladder-tds default-td\" style=\"box-shadow: -1px -1px 2px rgba(0, 0, 0, 0.3) inset, 1px 1px 1px rgba(255, 255, 255, 0.7) inset;\"';","\tconst first = 'class=\"first default-td important\" style=\"box-shadow: -1px -1px 2px rgba(0, 0, 0, 0.3) inset, 1px 1px 1px rgba(255, 255, 255, 0.7) inset;\"';","\tconst second = 'class=\"second default-td important\" style=\"box-shadow: -1px -1px 2px rgba(0, 0, 0, 0.3) inset, 1px 1px 1px rgba(255, 255, 255, 0.7) inset;\"';","\tconst third = 'class=\"third default-td important\" style=\"box-shadow: -1px -1px 2px rgba(0, 0, 0, 0.3) inset, 1px 1px 1px rgba(255, 255, 255, 0.7) inset;\"';","\tlet midColumn;","\tconst length = array.length;","","\tlet tableRows = '';","","\tfor (let i = 0; i < length; i++) {","\t\tif (i === 0) {","\t\t\tmidColumn = '</td><td ' + first + '>';","\t\t\ttableRows += '<tr><td ' + first + '>' + (i + 1) + midColumn + array[i].name + midColumn + array[i][prop] + '</td></tr>';","\t\t} else if (i === 1) {","\t\t\tmidColumn = '</td><td ' + second + '>';","\t\t\ttableRows += '<tr><td ' + second + '>' + (i + 1) + midColumn + array[i].name + midColumn + array[i][prop] + '</td></tr>';","\t\t} else if (i === 2) {","\t\t\tmidColumn = '</td><td ' + third + '>';","\t\t\ttableRows += '<tr><td ' + third + '>' + (i + 1) + midColumn + array[i].name + midColumn + array[i][prop] + '</td></tr>';","\t\t} else {","\t\t\tmidColumn = '</td><td ' + tdStyle + '>';","\t\t\ttableRows += '<tr><td ' + tdStyle + '>' + (i + 1) + midColumn + array[i].name + midColumn + array[i][prop] + '</td></tr>';","\t\t}","\t}","\treturn ladderTitle + tableTop + tableRows + tableBottom;","}","","function getShopDisplay(shop) {","\tlet display = \"<table width='100%' border='1' style='border-collapse: collapse; color: #444; box-shadow: 2px 3px 5px rgba(0, 0, 0, 0.2);' cellpadding='5'>\" +","\t\t\"<tr><th class='card-th' style='background-image: -moz-linear-gradient(center top , #EBF3FC, #DCE9F9); box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.8) inset;'>Command</th><th class='card-th' style='background-image: -moz-linear-gradient(center top , #EBF3FC, #DCE9F9); box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.8) inset;'>Description</th><th class='card-th' style='background-image: -moz-linear-gradient(center top , #EBF3FC, #DCE9F9); box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.8) inset;'>Cost</th></tr>\";","\tlet start = 0;","\twhile (start < shop.length) {","\t\tdisplay += \"<tr>\" + \"<td class='card-td'><button name='send' value='/buypack \" + shop[start][0] + \"' style='border-radius: 12px; box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2) inset;'><b>\" + shop[start][0] + \"</b></button></td>\" +","\t\t\t\"<td class='card-td'>\" + shop[start][1] + \"</td>\" +","\t\t\t\"<td class='card-td'>\" + shop[start][2] + \"</td>\" +","\t\t\t\"</tr>\";","\t\tstart++;","\t}","\tdisplay += \"</table><center>To buy a pack from the shop, use /buypack <em>pack</em>.</center>\";","\treturn display;","}","","function toTitleCase(str) {","\treturn str.replace(/(\\w\\S*)/g, function (txt) {","\t\treturn txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();","\t});","}","","cachePacks();","cacheRarity();","","exports.commands = {","\tpacks: 'pack',","\tpack: function (target, room, user) {","\t\tif (!this.runBroadcast()) return;","\t\tif (!target) target = user.name;","\t\ttarget = toId(target);","\t\tif (!userPacks[target] || userPacks[target].length === 0) return this.sendReply((target === user.userid ? 'You have' : target + ' has') + ' no packs.');","\t\tthis.sendReply('|raw|<u><b>List of packs:</b></u>');","\t\tfor (let i = 0; i < userPacks[target].length; i++) {","\t\t\tthis.sendReply('|raw| <button name=\"send\" value=\"/openpack ' + userPacks[target][i] + '\"> Press to open <b>' + toTitleCase(userPacks[target][i]) + '</b> pack</button>');","\t\t}","\t},","","\tbuypacks: 'buypack',","\tbuypack: function (target, room, user) {","\t\tif (!target) return this.sendReply(\"/buypack - Buys a pack from the pack shop. Alias: /buypacks\");","\t\tlet self = this;","\t\tlet packId = toId(target);","\t\tlet amount = Db('money').get(user.userid, 0);","\t\tif (cleanShop.indexOf(packId) < 0) return self.sendReply(\"This is not a valid pack. Use /packshop to see all packs.\");","\t\tlet shopIndex = cleanShop.indexOf(toId(target));","\t\tif (packId !== 'xybase' && packId !== 'xyfuriousfists' && packId !== 'xyflashfire' && packId !== 'xyphantomforces' && packId !== 'xyroaringskies' && packId !== 'xyprimalclash' && packId !== 'xyancientorigins' && packId !== 'xygenerations') return self.sendReply(\"This pack is not currently in circulation.  Please use /packshop to see the current packs.\");","\t\tlet cost = shop[shopIndex][2];","\t\tif (cost > amount) return self.sendReply(\"You need \" + (cost - amount) + \" more bucks to buy this pack.\");","\t\tlet total = Db('money').set(user.userid, amount - cost).get(user.userid);","\t\tlet pack = toId(target);","\t\tself.sendReply('|raw|You have bought ' + target + ' pack for ' + cost +","\t\t\t' bucks. Use <button name=\"send\" value=\"/openpack ' +","\t\t\tpack + '\"><b>/openpack ' + pack + '</b></button> to open your pack.');","\t\tself.sendReply(\"You have until the server restarts to open your pack.\");","\t\tif (!userPacks[user.userid]) userPacks[user.userid] = [];","\t\tuserPacks[user.userid].push(pack);","\t\tif (room.id !== 'lobby' && room.id !== 'casino') room.addRaw(user.name + ' has bought <b>' + target + ' pack </b> from the shop.');","\t\troom.update();","\t},","","\tpackshop: function (target, room, user) {","\t\tif (!this.runBroadcast()) return;","\t\treturn this.sendReply('|raw|' + getShopDisplay(shop));","\t},","","\topen: 'openpack',","\topenpacks: 'openpack',","\topenpack: function (target, room, user) {","\t\tif (!this.runBroadcast()) return;","\t\tif (!target) {","\t\t\tthis.sendReply(\"/openpack [pack] - Open a Pokemon Card Pack. Alias: /open, /openpacks\");","\t\t\treturn this.parse('/packs');","\t\t}","\t\tif (cleanShop.indexOf(toId(target)) < 0) return this.sendReply(\"This pack does not exist.\");","\t\tif (!userPacks[user.userid] || userPacks[user.userid].length === 0) return this.sendReply(\"You have no packs.\");","\t\tif (userPacks[user.userid].indexOf(toId(target)) < 0) return this.sendReply(\"You do not have this pack.\");","\t\tlet newPack;","\t\tfor (let i = 0; i < 3; i++) {","\t\t\tnewPack = toId(target);","\t\t\tlet cacheValue = cardCache[cleanShop.indexOf(toId(target))];","\t\t\tlet card = cacheValue[Math.round(Math.random() * (cacheValue.length - 1))];","\t\t\taddCard(user.userid, card);","\t\t\tlet cardName = cards[card].name;","\t\t\tlet packName = packShop[cleanShop.indexOf(toId(target))];","\t\t\tthis.sendReplyBox(user.name + ' got <font color=\"' + colors[cards[card].rarity] + '\">' + cards[card].rarity + '</font>' +","\t\t\t'<button name=\"send\" value=\"/card ' + card + '\"><b>' + cardName + '</b></button> from a' +","\t\t\t'<button name=\"send\" value=\"/buypack ' + packName + '\">' + packName + ' Pack</button>.');","\t\t}","\t\tlet usrIndex = userPacks[user.userid].indexOf(newPack);","\t\tuserPacks[user.userid].splice(usrIndex, 1);","\t},","","\tgivepacks: 'givepack',","\tgivepack: function (target, room, user) {","\t\tif (!user.can('declare')) return this.errorReply(\"/givepack - Access denied.\");","\t\tif (!target) return this.sendReply(\"/givepack [user], [pack] - Give a user a pack.\");","\t\tlet parts = target.split(',');","\t\tthis.splitTarget(parts[0]);","\t\tif (!parts[1]) return this.sendReply(\"/givepack [user], [pack] - Give a user a pack.\");","\t\tlet pack = toId(parts[1]);","\t\tlet userid = toId(this.targetUsername);","\t\tif (cleanShop.indexOf(pack) < 0) return this.sendReply(\"This pack does not exist.\");","\t\tif (!this.targetUser) return this.sendReply(\"User '\" + this.targetUsername + \"' not found.\");","\t\tif (!userPacks[userid]) userPacks[userid] = [];","\t\tuserPacks[userid].push(pack);","\t\tthis.sendReply(this.targetUsername + \" was given \" + pack + \" pack. This user now has \" + userPacks[userid].length + \" pack(s).\");","\t\tUsers.get(this.targetUsername).connections[0].sendTo(room.id,","\t\t\t'|raw|' + user.name + ' has given you ' + pack + ' pack. You have until the server restarts to open your pack.' +","\t\t\t'Use <button name=\"send\" value=\"/openpack ' + pack + '\"><b>/openpack ' + pack + '</b></button> to open your pack.');","\t},","","\ttakepacks: 'takepack',","\ttakepack: function (target, room, user) {","\t\tif (!user.can('takepack')) return this.errorReply(\"/takepack - Access denied.\");","\t\tif (!target) return this.sendReply(\"/takepack [user], [pack] - Take a pack from a user.\");","\t\tlet parts = target.split(',');","\t\tthis.splitTarget(parts[0]);","\t\tif (!parts[1]) return this.sendReply(\"/takepack [user], [pack] - Take a pack from a user.\");","\t\tlet pack = toId(parts[1]);","\t\tlet userid = toId(this.targetUsername);","\t\tlet packIndex = userPacks[userid].indexOf(pack);","\t\tif (packShop.indexOf(pack) < 0) return this.sendReply(\"This pack does not exist.\");","\t\tif (!this.targetUser) return this.sendReply(\"User '\" + this.targetUsername + \"' not found.\");","\t\tif (!userPacks[userid]) userPacks[userid] = [];","\t\tif (packIndex < 0) return this.sendReply(\"This user does not have this pack.\");","\t\tuserPacks[userid].splice(packIndex, 1);","\t\tthis.sendReply(this.targetUsername + \" lost \" + pack + \" pack. This user now has \" + userPacks[userid].length + \" pack(s).\");","\t\tUsers.get(this.targetUsername).send('|raw|' + user.name + ' has taken ' + pack + ' pack from you. You now have ' + userPacks[userid].length + ' pack(s).');","\t},","","\tshowcards: 'showcase',","\tshowcard: 'showcase',","\tshowcase: function (target, room, user) {","\t\tif (!this.runBroadcast()) return;","\t\tlet userid = user.userid;","\t\tif (target) userid = toId(target);","\t\tconst cards = Db('cards').get(userid, []);","\t\tif (!cards.length) return this.sendReplyBox(userid + \" has no cards.\");","\t\tconst cardsMapping = cards.map(function (card) {","\t\t\treturn '<button name=\"send\" value=\"/card ' + card.title + '\" style=\"border-radius: 12px; box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2) inset;\" class=\"card-button\"><img src=\"' + card.card + '\" width=\"80\" title=\"' + card.name + '\"></button>';","\t\t});","\t\tthis.sendReplyBox('<div style=\"max-height: 300px; overflow-y: scroll;\">' + cardsMapping.join('') + '</div><br><center><b><font color=\"' + color(userid) + '\">' + userid + '</font> has ' + cards.length + ' cards and ' + getPointTotal(userid) + ' points.</b></center>');","\t},","","\tcard: function (target, room, user) {","\t\tif (!target) return this.sendReply(\"/card [name] - Shows information about a card.\");","\t\tif (!this.runBroadcast()) return;","\t\tlet cardName = toId(target);","\t\tif (!cards.hasOwnProperty(cardName)) return this.sendReply(target + \": card not found.\");","\t\tlet card = cards[cardName];","\t\tlet html = '<div class=\"card-div card-td\" style=\"box-shadow: 2px 3px 5px rgba(0, 0, 0, 0.2);\"><img src=\"' + card.card + '\" height=\"220\" title=\"' + card.name + '\" align=\"right\">' +","\t\t\t'<span class=\"card-name\" style=\"border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; background-image: -moz-linear-gradient(center top , #EBF3FC, #DCE9F9);  box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.8) inset, 0px 0px 2px rgba(0, 0, 0, 0.2);\">' + card.title + '</span>' +","\t\t\t'<br /><br /><h1><font color=\"' + colors[card.rarity] + '\">' + card.rarity + '</font></h1>' +","\t\t\t'<br /><br /><font color=\"#AAA\"><i>Points:</i></font> ' + card.points +","\t\t\t'<br /><br /><font color=\"#AAA\"><i>Found in Packs:</i></font>' + card.collection.join(', ') +","\t\t\t'<br clear=\"all\">';","\t\tthis.sendReply('|raw|' + html);","\t},","","\tcardladder: function (target, room, user) {","\t\tif (!this.runBroadcast()) return;","\t\tlet keys = Object.keys(Db('points').object()).map(function (name) {","\t\t\treturn {name: name, points: getPointTotal(name)};","\t\t});","\t\tif (!keys.length) return this.sendReplyBox(\"Card ladder is empty.\");","\t\tkeys.sort(function (a, b) { return b.points - a.points; });","\t\tthis.sendReplyBox(rankLadder('Card Ladder', 'Points', keys.slice(0, 100), 'points'));","\t},","","\tcs: 'cardsearch',","\tcardsearch: 'searchcard',","\tsearchcard: function (target, room, user) {","\t\tconst letters = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");","\t\tconst categories = {","\t\t\tRarity: ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary', 'Mythic'], // rarities","\t\t\tPacks: ['XY-Promo', 'XY-Base', 'XY-Flashfire', 'XY-Furious Fists', 'XY-Phantom Forces', 'XY-Primal Clash', 'XY-Roaring Skies', 'XY-Ancient Origins', 'Double Crisis'],","\t\t\tTypes: ['Water', 'Fire', 'Fighting', 'Fairy', 'Dragon', 'Colorless', 'Psychic', 'Lightning', 'Darkness', 'Grass', 'Metal'],","\t\t\tTiers: ['OU-Pack', 'UU-Pack', 'Uber-Pack', 'PU-Pack', 'NU-Pack', 'RU-Pack', 'LC-Pack', 'BL-Pack', 'BL2-Pack', 'BL3-Pack'],","\t\t\tGeneration: ['Gen1', 'Gen2', 'Gen3', 'Gen4', 'Gen5', 'Gen6'],","\t\t\tMiscellaneous: ['Trainer', 'Supporter', 'Item', 'Stadium', 'Energy', 'Delta', 'EX-Pack', 'Mega', 'Legendary', 'Full', 'Event'],","\t\t};","","\t\tconst scrollable = \"<div style=\\\"max-height: 300px; overflow-y: scroll\\\">\"; // code for scrollable html","\t\tconst divEnd = \"</div>\";","\t\tconst definePopup = \"|wide||html|<center><b>CardSearch</b></center><br />\";","\t\tconst generalMenu = \"<center>\" +","\t\t\t'<button name=\"send\" value=\"/searchcard letter\" style=\\\"background-color:aliceblue;height:30px\\\">Alphabetical</button>&nbsp;&nbsp;' + // alphabetical","\t\t\t'<button name=\"send\" value=\"/searchcard category\" style=\\\"background-color:aliceblue;height:30px\\\">Categories</button>&nbsp;&nbsp;' + // category","\t\t\t'</center><br />';","\t\tif (!target) {","\t\t\treturn user.popup(definePopup + generalMenu);","\t\t}","\t\t// quick fix for when target ends with a comma","\t\ttarget = target.replace(/\\,[\\s]+$/i, \"\");","\t\tlet parts = target.split(\",\");","\t\tlet actionCommand = parts.shift();","\t\tlet cardDisplay;","\t\tswitch (toId(actionCommand)) {","\t\tcase 'letter':","\t\t\tlet letter = toId(parts[0]);","","\t\t\tconst letterMenu = '<center>' + letters.map(l => {","\t\t\t\treturn '<button name=\"send\" value=\"/searchcard letter, ' + l + '\" ' + (letter === l ? \"style=\\\"background-color:lightblue;height:30px;width:35px\\\"\" : \"style=\\\"background-color:aliceblue;height:30px;width:35px\\\"\") + \">\" + l.toUpperCase() + \"</button>\";","\t\t\t}).join(\"&nbsp;\") + \"</center><br />\";","","\t\t\tif (!letter || letters.indexOf(letter) === -1) {","\t\t\t\t// invalid letter to search for, or none given","\t\t\t\t// only show menu","\t\t\t\treturn user.popup(definePopup + generalMenu + letterMenu);","\t\t\t}","\t\t\t// sort cards by letter","\t\t\tlet letterMons = {};","\t\t\tfor (let m in cards) {","\t\t\t\tif (!letterMons[m.charAt(0)]) letterMons[m.charAt(0)] = {};","\t\t\t\tletterMons[m.charAt(0)][m] = 1;","\t\t\t}","","\t\t\tif (!letterMons[letter]) return user.popup(definePopup + generalMenu + letterMenu);","\t\t\t// make graphics for the letter","\t\t\tcardDisplay = Object.keys(letterMons[letter]).sort().map(m => {","\t\t\t\tlet card = cards[m];","\t\t\t\treturn '<button name=\"send\" value=\"/searchcard card, ' + card.title + '\" style=\"border-radius: 12px; box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2) inset;\" class=\"card-button\"><img src=\"' + card.card + '\" width=\"100\" title=\"' + card.name + '\"></button>';","\t\t\t}).join(\"&nbsp;\");","\t\t\t// send the popup","\t\t\tuser.lastCardSearch = target;","\t\t\tuser.popup(definePopup + generalMenu + letterMenu + scrollable + cardDisplay + divEnd);","\t\t\tbreak;","\t\tcase 'category':","\t\t\t// clean all the parts first","\t\t\tparts = parts.map(p => {","\t\t\t\treturn toId(p);","\t\t\t});","","\t\t\t// create category menu","\t\t\tlet categoryMenu = \"\";","\t\t\tfor (let c in categories) {","\t\t\t\tcategoryMenu += '<b>' + c + ' -</b> ' + categories[c].map(k => {","\t\t\t\t\tlet m = toId(k);","\t\t\t\t\t// add a special search condition for rarity","\t\t\t\t\tif (c === \"Rarity\") m += \"rarity\";","","\t\t\t\t\t// new params for the search","\t\t\t\t\t// clone parts","\t\t\t\t\tlet newParams = parts.slice(0);","\t\t\t\t\tif (parts.indexOf(m) > -1) {","\t\t\t\t\t\t// remove it","\t\t\t\t\t\tnewParams.splice(newParams.indexOf(m), 1);","\t\t\t\t\t} else {","\t\t\t\t\t\tnewParams.push(m);","\t\t\t\t\t}","","\t\t\t\t\tlet style = (parts.indexOf(m) > -1 ? \"style=\\\"background-color:lightblue;height:23\\\"\" : \"style=\\\"background-color:aliceblue;height:23\\\"\"); // button style checking if currently searching","","\t\t\t\t\treturn '<button name=\"send\" value=\"/searchcard category, ' + newParams.join(\", \") + '\" ' + style + '>' + k + '</button>';","\t\t\t\t}).join(\"&nbsp;\") + \"<br />\";","\t\t\t}","\t\t\tif (!parts.length) {","\t\t\t\treturn user.popup(definePopup + generalMenu + categoryMenu);","\t\t\t}","\t\t\t// now clone the cards and delete the ones who dont match the categories","\t\t\tlet paramCards = Object.assign({}, cards);","","\t\t\t// filter out the unneeded ones; ignore rarity","\t\t\tfor (let i = 0; i < parts.length; i++) {","\t\t\t\tlet param = parts[i];","\t\t\t\t// ignore rarity","\t\t\t\tif (/rarity$/i.test(param)) continue;","\t\t\t\tfor (let c in paramCards) {","\t\t\t\t\tlet cardParams = paramCards[c].collection.join(\"~\").toLowerCase().replace(/[^a-z0-9\\~]/g, \"\").split(\"~\");","\t\t\t\t\tif (cardParams.indexOf(param) === -1) delete paramCards[c]; // remove the card from the currently searched ones.","\t\t\t\t}","\t\t\t}","","\t\t\t// seperate check for rarity","\t\t\tlet rarityCheck = parts.some(a => {","\t\t\t\treturn /rarity$/i.test(a);","\t\t\t});","\t\t\tif (rarityCheck) {","\t\t\t\tfor (let c in paramCards) {","\t\t\t\t\tlet cardRare = toId(paramCards[c].rarity);","\t\t\t\t\tfor (let i = 0; i < parts.length; i++) {","\t\t\t\t\t\tif (/rarity$/i.test(parts[i])) {","\t\t\t\t\t\t\t// check if rarity is the card's rarity","\t\t\t\t\t\t\tif (parts[i].replace(/rarity$/i, \"\") !== cardRare) {","\t\t\t\t\t\t\t\t// remove if not matched","\t\t\t\t\t\t\t\tdelete paramCards[c];","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","","\t\t\t// no cards left","\t\t\tif (!Object.keys(paramCards).length) {","\t\t\t\treturn user.popup(definePopup + generalMenu + categoryMenu + '<br /><center><font color=\"red\"><b>Nothing matches your search</b></font></center>');","\t\t\t}","\t\t\tuser.lastCardSearch = target;","\t\t\t// build the display","\t\t\tcardDisplay = Object.keys(paramCards).sort().map(m => {","\t\t\t\tlet card = paramCards[m];","\t\t\t\treturn '<button name=\"send\" value=\"/searchcard card, ' + card.title + '\" style=\"border-radius: 12px; box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2) inset;\" class=\"card-button\"><img src=\"' + card.card + '\" width=\"100\" title=\"' + card.name + '\"></button>';","\t\t\t}).join(\"&nbsp;\");","\t\t\tuser.popup(definePopup + generalMenu + categoryMenu + scrollable + cardDisplay + divEnd);","\t\t\tbreak;","\t\tcase 'card':","\t\t\tlet backButton = '<button name=\"send\" value=\"/cardsearch ' + user.lastCardSearch + '\" style=\"background-color:aliceblue;height:30px;width:35\">&lt;&nbsp;Back</button><br /><br />';","\t\t\tif (!parts[0] || !(toId(parts[0]) in cards)) {","\t\t\t\treturn user.popup(definePopup + backButton + '<center><font color=\"red\"><b>Invalid Card</b></font></center>');","\t\t\t}","","\t\t\t// build the display screen for the card","\t\t\tlet card = cards[toId(parts[0])];","\t\t\t// the image","\t\t\tlet cardImage = '<img src=\"' + card.card + '\" height=250>';","\t\t\t// the name of the card","\t\t\tlet cardName = \"<b>Name:</b> \" + card.name + \"<br />\";","\t\t\t// the id of the card","\t\t\tlet cardId = \"<font color=\\\"gray\\\">(\" + card.title + \")</font><br />\";","\t\t\t// rarity display","\t\t\tlet cardRarityPoints = '<b>Rarity: </b><font color=\"' + colors[card.rarity] + '\">' + card.rarity + '</font> (' + card.points + ')<br />';","\t\t\t// collections","\t\t\tlet cardCollection = '<b>Packs: </b>' + card.collection.join(\", \") + \"<br />\";","\t\t\t// get users that have the card","\t\t\tlet allCardUsers = Db('cards').object();","\t\t\tlet cardHolders = [];","\t\t\t// dont allow duplicates","\t\t\tfor (let u in allCardUsers) {","\t\t\t\tlet userData = allCardUsers[u];","\t\t\t\tfor (let i = 0; i < userData.length; i++) {","\t\t\t\t\tlet tC = userData[i];","\t\t\t\t\tif (tC && tC.title === card.title) {","\t\t\t\t\t\tif (!cardHolders[u]) cardHolders[u] = 0;","\t\t\t\t\t\tcardHolders[u]++;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\t// show duplicates as (x#)","\t\t\tcardHolders = Object.keys(cardHolders).sort().map(u => {","\t\t\t\treturn \"&nbsp;- \" + u + (cardHolders[u] > 1 ? \" (x\" + cardHolders[u] + \")\" : \"\");","\t\t\t});","","\t\t\t// build the display!","\t\t\tcardDisplay = \"<center><table><tr>\" +","\t\t\t\t\"<td>\" + cardImage + \"</td>\" + // Card on the left","\t\t\t\t\"<td>\" + // details now","\t\t\t\tcardName + cardId + cardRarityPoints + cardCollection +","\t\t\t\t\"<b>Users with this card:</b><br />\" + // card holders","\t\t\t\t\"<div style=\\\"max-height: 130px; overflow-y: scroll\\\">\" + // scrollable","\t\t\t\tcardHolders.join(\"<br />\") + \"<br />\" +","\t\t\t\t\"</td></tr></table></center>\"; // close the table","","\t\t\tuser.popup(definePopup + backButton + cardDisplay);","\t\t\tbreak;","\t\tcase 'error':","\t\tdefault:","\t\t\tuser.popup(definePopup + generalMenu + '<br /><center><font color=\"red\"><b>Invalid Command action for CardSearch</b></font></center>');","\t\t\tbreak;","\t\t}","\t},","","\ttrade: 'tradecard',","\ttradecard: function (target, room, user) {","\t\tif (!target) return this.errorReply(\"/tradecard [card ID], [user], [targetCard ID]\");","\t\tlet parts = target.split(\",\").map(p => toId(p));","\t\tif (parts.length !== 3) return this.errorReply(\"/tradecard [your card's ID], [targetUser], [targetCard ID]\");","\t\tlet match;","","\t\t// check for user's card","\t\tlet forTrade = parts[0];","\t\tmatch = false;","\t\tlet userCards = Db('cards').get(user.userid, []);","\t\tfor (let i = 0; i < userCards.length; i++) {","\t\t\tif (userCards[i].title === forTrade) {","\t\t\t\tmatch = true;","\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\tif (!match) return this.errorReply(\"You don't have that card!\");","","\t\t// check for target's card","\t\tlet targetUser = parts[1];","\t\tlet targetTrade = parts[2];","","\t\tlet targetCards = Db('cards').get(targetUser, []);","\t\tmatch = false;","\t\tfor (let i = 0; i < targetCards.length; i++) {","\t\t\tif (targetCards[i].title === targetTrade) {","\t\t\t\tmatch = true;","\t\t\t\tbreak;","\t\t\t}","\t\t}","","\t\tif (!match) return this.errorReply(targetUser + \" does not have that card!\");","","\t\t// initiate trade","\t\tlet tradeId = uuid.v1();","\t\tlet newTrade = {","\t\t\tfrom: user.userid,","\t\t\tto: targetUser,","\t\t\tfromExchange: forTrade,","\t\t\ttoExchange: targetTrade,","\t\t\tid: tradeId,","\t\t};","","\t\tDb('cardtrades').set(tradeId, newTrade);","","\t\t// send messages","\t\tthis.sendReply(\"Your trade has been taken submitted.\");","\t\tif (Users.get(targetUser)) Users.get(targetUser).send(\"|pm|~GlaciaCardTradeClient|\" + targetUser + \"|/html <div class=\\\"broadcast-green\\\">\" + Tools.escapeHTML(user.name) + \" has initiated a trade with you.  Click <button name=\\\"send\\\" value=\\\"/trades last\\\">here</button> or use <b>/trades</b> to view your pending trade requests.</div>\");","\t\tuser.send(\"|pm|~GlaciaCardTradeClient|\" + user.userid + \"|/html <div class=\\\"broadcast-green\\\">Your trade with \" + Tools.escapeHTML(targetUser) + \" has been initiated.  Click <button name=\\\"send\\\" value=\\\"/trades last\\\">here</button> or use <b>/trades</b> to view your pending trade requests.</div>\");","\t},","","\ttrades: 'viewcardtrades',","\tviewcardtrades: function (target, room, user) {","\t\t// popup variables","\t\tconst popup = \"|html|<center><b><font color=\\\"blue\\\">Trade Manager</font></b></center><br />\";","","\t\t// get the user's trades","\t\tlet allTrades = Db('cardtrades').object();","\t\tlet userTrades = [];","\t\tfor (let id in allTrades) {","\t\t\tlet trade = allTrades[id];","\t\t\tif (trade.from === user.userid || trade.to === user.userid) {","\t\t\t\t// push this into the user's trade data","\t\t\t\tuserTrades.push(trade);","\t\t\t}","\t\t}","","\t\t// if no pending trades","\t\tif (!userTrades.length) return user.popup(popup + \"<center>You have no pending trades.</center>\");","","\t\t// build trade manager screen","\t\t// decide which trade to display","\t\tif (target === \"last\") {","\t\t\ttarget = userTrades.length - 1;","\t\t} else {","\t\t\t// when there is no target (initial use of command)","\t\t\tif (!target) target = 0;","\t\t\ttarget = parseInt(target);","\t\t\tif (isNaN(target)) target = 0;","\t\t\tif (target < 0) target = 0;","\t\t\tif (target >= userTrades.length) target = userTrades.length - 1;","\t\t}","","\t\t// show trade details","\t\tlet displayTrade = userTrades[target];","\t\tconst acceptReject = '<center>' + (displayTrade.from === user.userid ? \"\" : '<button name=\"send\" value=\"/tradeaction accept, ' + displayTrade.id + '\" style=\\\"background-color:green;height:30px\\\"><b>Accept</b></button>') + // accept button","\t\t\t'&nbsp;&nbsp;' + // spacing","\t\t\t'<button name=\"send\" value=\"/tradeaction ' + (displayTrade.from === user.userid ? \"cancel\" : \"reject\") + ', ' + displayTrade.id + '\" style=\\\"background-color:red;height:30px\\\"><b>' + (displayTrade.from === user.userid ? \"Cancel\" : \"Reject\") + '</b></button></center>' + // reject button","\t\t\t'<br /><br />'; // new line","","\t\t// build the user's card first","\t\tlet card = cards[(displayTrade.from === user.userid ? displayTrade.fromExchange : displayTrade.toExchange)];","\t\t// the image","\t\tlet cardImage = '<img src=\"' + card.card + '\" height=250>';","\t\t// rarity display","\t\tlet cardRarityPoints = '(<font color=\"' + colors[card.rarity] + '\">' + card.rarity + '</font> - ' + card.points + ')<br />';","\t\tlet userSideDisplay = '<center>' + user.userid + '<br />' + cardImage + \"<br />\" + cardRarityPoints + '</center>';","","\t\t// now build the target's side","\t\tcard = cards[(displayTrade.from !== user.userid ? displayTrade.fromExchange : displayTrade.toExchange)];","\t\t// the image","\t\tcardImage = '<img src=\"' + card.card + '\" height=250>';","\t\t// rarity display","\t\tcardRarityPoints = '(<font color=\"' + colors[card.rarity] + '\">' + card.rarity + '</font> - ' + card.points + ')<br />';","\t\tlet targetSideDisplay = \"<center>\" + (displayTrade.from !== user.userid ? displayTrade.from : displayTrade.to) + '<br />' + cardImage + \"<br />\" + cardRarityPoints + \"</center>\";","","\t\t// now build the entire popup","\t\tlet tradeScreen = popup + // base popup","\t\t\t'<center><table><tr><td>' + // table element","\t\t\tuserSideDisplay +","\t\t\t'</td><td>' + // next column","\t\t\ttargetSideDisplay +","\t\t\t'</td></tr></table></center><br />' + // close table and add new line","\t\t\tacceptReject;","","\t\t// build the navigation bar","\t\t// build max and min","\t\tlet navigationButtons;","\t\tif (userTrades.length === 1) {","\t\t\tnavigationButtons = '<center><button style=\"background-color:deepskyblue;height:30px;width:30px\">1</button></center>';","\t\t} else {","\t\t\t// build min and mas","\t\t\tlet min = '<button style=\"background-color:lightblue;height:30px;width:30px\" name=\"send\" value=\"/viewcardtrades 0\">1</button>&nbsp;&nbsp;&nbsp;';","\t\t\tlet max = '&nbsp;&nbsp;&nbsp;<button style=\"background-color:lightblue;height:30px;width:30px\" name=\"send\" value=\"/viewcardtrades last\">' + (userTrades.length) + '</button>';","\t\t\t// lazy replace for colour","\t\t\tif (target === 0) min = min.replace(\"background-color:lightblue;height:30px\", \"background-color:deepskyblue;height:30px\");","\t\t\tif (target === userTrades.length - 1) max = max.replace(\"background-color:lightblue;height:30px\", \"background-color:deepskyblue;height:30px\");","","\t\t\tlet middle = \"\";","\t\t\t// build range","\t\t\tlet range = Object.keys(userTrades).slice(1, userTrades.length - 1); // remove min and max and turn it into a array of numbers","\t\t\tif (range.length !== 0) { // only build middle buttons is there is none","\t\t\t\tif (range.length > 5) {","\t\t\t\t\t// find the current one and get 2 above and below","\t\t\t\t\tlet displayRange = [target - 2, target - 1, target, target + 1, target + 2].filter(i => {","\t\t\t\t\t\treturn i > 0 && i <= range.length;","\t\t\t\t\t});","\t\t\t\t\t// build middle buttons","\t\t\t\t\tmiddle = (displayRange[0] !== 1 ? \"... \" : \"\") + displayRange.map(n => {","\t\t\t\t\t\tn = parseInt(n);","\t\t\t\t\t\tlet style = n === target ? \"background-color:deepskyblue;height:30px;width:30px\" : \"background-color:aliceblue;height:30px;width:30px\";","\t\t\t\t\t\treturn '<button style=\"' + style + '\" name=\"send\" value=\"/viewcardtrades ' + n + '\">' + (n + 1) + '</button>';","\t\t\t\t\t}).join(\"&nbsp;\") + (displayRange[displayRange.length - 1] !== range.length ? \" ...\" : \"\");","\t\t\t\t} else {","\t\t\t\t\t// just map the range","\t\t\t\t\tmiddle = range.map(n => {","\t\t\t\t\t\tn = parseInt(n);","\t\t\t\t\t\tlet style = n === target ? \"background-color:deepskyblue;height:30px;width:30px\" : \"background-color:aliceblue;height:30px;width:30px\";","\t\t\t\t\t\treturn '<button style=\"' + style + '\" name=\"send\" value=\"/viewcardtrades ' + n + '\">' + (n + 1) + '</button>';","\t\t\t\t\t}).join(\"&nbsp;\");","\t\t\t\t}","\t\t\t}","\t\t\t// add the stuff to navigation buttons","\t\t\tnavigationButtons = \"<center>\" + min + middle + max + \"</center>\";","\t\t}","\t\t// add the navigation buttons to the popup","\t\tuser.lastTradeCommand = \"/viewcardtrades \" + target;","\t\ttradeScreen += navigationButtons;","\t\tuser.popup(tradeScreen);","\t},","","\ttradeaction: function (target, room, user) {","\t\tif (!target) return false; // due to the complexity of the command, this should only be used through the viewtrades screen","\t\tlet parts = target.split(\",\").map(p => p.trim());","\t\tlet action = toId(parts.shift());","\t\tconst backButton = '<button name=\"send\" value=\"' + (user.lastTradeCommand || '/viewcardtrades') + '\" style=\"background-color:aliceblue;height:30px\">< Back</button><br /><br />';","\t\tconst tradeError = \"|html|\" + backButton + '<center><font color=\"red\"><b>ERROR: Invalid Trade / You cannot accept your own trade request!</b></font><center>';","\t\tlet trade;","\t\tswitch (action) {","\t\tcase 'confirmaccept':","\t\tcase 'accept':","\t\t\tif (!parts[0]) return false;","\t\t\tif (action === \"accept\") {","\t\t\t\t// make the user confirm the decision","\t\t\t\t// build a back button","\t\t\t\treturn user.popup(\"|html|\" + backButton + // back button","\t\t\t\t'<center><button name=\"send\" value=\"/tradeaction confirmaccept, ' + parts[0] + '\" style=\"background-color:red;height:65px;width:150px\"><b>Confirm Trade</b></button></center>');","\t\t\t}","\t\t\t// finalize trade","\t\t\t// get the trade","\t\t\ttrade = Db('cardtrades').get(parts[0], null);","\t\t\tif (!trade) return user.popup(tradeError);","","\t\t\t// check if the trade involves the user","\t\t\tlet accepter, otherTarget;","\t\t\tif (trade.to === user.userid) {","\t\t\t\taccepter = \"to\";","\t\t\t\totherTarget = \"from\";","\t\t\t} else {","\t\t\t\t// user has no say in this trade","\t\t\t\treturn user.popup(tradeError);","\t\t\t}","","\t\t\tlet match;","\t\t\t// now double check that both users still have those cards","\t\t\t// check user first","\t\t\tmatch = false;","\t\t\tlet userCards = Db('cards').get(user.userid, []);","\t\t\tfor (let i = 0; i < userCards.length; i++) {","\t\t\t\tif (userCards[i].title === trade[accepter + \"Exchange\"]) {","\t\t\t\t\tmatch = true;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","","\t\t\tif (!match) return this.parse('/tradeaction forcecancel, ' + trade.id);","","\t\t\t// check target","\t\t\tmatch = false;","\t\t\tlet targetCards = Db('cards').get(trade[otherTarget], []);","\t\t\tfor (let i = 0; i < targetCards.length; i++) {","\t\t\t\tif (targetCards[i].title === trade[otherTarget + \"Exchange\"]) {","\t\t\t\t\tmatch = true;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","\t\t\tif (!match) return this.parse('/tradeaction forcecancel, ' + trade.id);","","\t\t\t// now go ahead with the trade!","\t\t\t// for \"from\" first","\t\t\taddCard(trade.from, trade.toExchange);","\t\t\tremoveCard(trade.fromExchange, trade.from);","","\t\t\t// apply the actions to \"to\"","\t\t\taddCard(trade.to, trade.fromExchange);","\t\t\tremoveCard(trade.toExchange, trade.to);","","\t\t\t// update points","\t\t\tDb('points').set(trade.to, getPointTotal(trade.to));","\t\t\tDb('points').set(trade.from, getPointTotal(trade.from));","","\t\t\t// remove the trade","\t\t\tDb('cardtrades').delete(parts[0]);","","\t\t\t// on trade success","\t\t\t// send popups to both user and target saying the trade with user was a success","\t\t\t// and a button to view the card they just received","\t\t\tlet targetUsers = [Users.get(trade.to), Users.get(trade.from)];","\t\t\tif (targetUsers[0]) {","\t\t\t\ttargetUsers[0].popup(\"|html|\" + backButton + \"<center>Your trade with \" + trade.from + \" has gone through.\" +","\t\t\t\t\"<br /><button name=\\\"send\\\" value=\\\"/cs card, \" + trade.fromExchange + \"\\\">View Traded Card</button></center>\"); // show card","\t\t\t}","\t\t\tif (targetUsers[1]) {","\t\t\t\ttargetUsers[1].popup(\"|html|<center>Your trade with \" + trade.to + \" has gone through.\" +","\t\t\t\t\"<br /><button name=\\\"send\\\" value=\\\"/cs card, \" + trade.toExchange + \"\\\">View Traded Card</button></center>\");","\t\t\t}","","\t\t\t// log trades and delete the data from list of trades.","\t\t\tlet now = Date.now().toString();","\t\t\tDb('completedTrades').set(now, trade);","\t\t\tbreak;","\t\tcase 'forcecancel':","\t\tcase 'cancel':","\t\tcase 'reject':","\t\t\tif (!parts[0]) return false;","\t\t\t// check for trade","\t\t\ttrade = Db('cardtrades').get(parts[0], null);","","\t\t\tif (!trade) return user.popup(tradeError);","","\t\t\t// additional consts","\t\t\tconst popupText = {","\t\t\t\tforcecancel: \"The trade has automatically been cancelled as one of the participants does not have that card anymore.\",","\t\t\t\tcancel: \"You have cancelled the trade\",","\t\t\t};","","\t\t\t// check if user is involved","\t\t\tif (trade.from === user.userid || trade.to === user.userid) {","\t\t\t\t// check that the action is correct","\t\t\t\tif (trade.from === user.userid && action === \"reject\") action = \"cancel\";","\t\t\t\tif (trade.to === user.userid && action !== \"reject\" && action !== \"forcecancel\") action = \"reject\";","\t\t\t} else {","\t\t\t\treturn user.popup(tradeError);","\t\t\t}","","\t\t\t// remove the trade","\t\t\tDb('cardtrades').delete(parts[0]);","","\t\t\t// letting the users involved know","\t\t\tlet targetUser;","\t\t\tif (action === \"reject\") {","\t\t\t\ttargetUser = Users.get(trade.from);","\t\t\t\tif (targetUser) targetUser.popup(\"Your trade request with \" + user.userid + \" was rejected\");","\t\t\t\tuser.popup(\"|html|\" + backButton + \"You have rejected \" + trade.from + \"'s trade request.\");","\t\t\t} else {","\t\t\t\tuser.popup(\"|html|\" + backButton + popupText[action]);","\t\t\t}","\t\t\tbreak;","\t\t}","\t},","","\tconfirmtransfercard: 'transfercard',","\ttransfercard: function (target, room, user, connection, cmd) {","\t\tif (!target) return this.errorReply(\"/transfercard [user], [card ID]\");","\t\tif (toId(target) === user) return this.errorReply(\"You cannot transfer cards to yourself.\");","\t\tlet parts = target.split(\",\").map(p => toId(p));","\t\t// find targetUser and the card being transfered.","\t\tlet targetUser = parts.shift();","\t\tlet card = parts[0];","\t\tif (!targetUser || !card) return this.errorReply(\"/transfercard [user], [card ID]\");","","\t\tif (cmd === \"transfercard\") {","\t\t\treturn user.popup('|html|<center><button name=\"send\" value=\"/confirmtransfercard ' + target + '\" style=\"background-color:red;height:65px;width:150px\"><b><font color=\"white\" size=3>Confirm Transfer to ' + targetUser + '</font></b></button>');","\t\t}","\t\t// check if card can been removed","\t\tlet canTransfer = removeCard(card, user.userid);","\t\tif (!canTransfer) return user.popup(\"Invalid card.\");","\t\t// complete transfer","\t\taddCard(targetUser, card);","","\t\tDb('points').set(targetUser, getPointTotal(targetUser));","\t\tDb('points').set(user.userid, getPointTotal(user.userid));","","\t\t// build transfer profile","\t\tlet newTransfer = {","\t\t\tfrom: user.userid,","\t\t\tto: targetUser,","\t\t\ttransfer: card,","\t\t};","\t\t// log it","\t\tlet now = Date.now().toString();","\t\tDb('completedTrades').set(now, newTransfer);","\t\tuser.popup(\"You have successfully transfered \" + card + \" to \" + targetUser + \".\");","\t},","","\tconfirmtransferallcards: 'transferallcards',","\ttransferallcards: function (target, room, user, connection, cmd) {","\t\tif (!target) return this.errorReply(\"/transferallcards [user]\");","\t\tif (toId(target) === user) return this.errorReply(\"You cannot transfer cards to yourself.\");","\t\tlet targetUser = toId(target);","\t\tif (!targetUser) return this.errorReply(\"/transferallcards [user]\");","\t\tlet userCards = Db('cards').get(user.userid, []);","\t\tlet targetCards = Db('cards').get(targetUser, []);","","\t\tif (!userCards.length) return this.errorReply(\"You don't have any cards.\");","","\t\t// confirmation","\t\tif (cmd === \"transferallcards\") {","\t\t\treturn user.popup('|html|<center><button name=\"send\" value=\"/confirmtransferallcards ' + target + '\" style=\"background-color:red;height:65px;width:150px\"><b><font color=\"white\" size=3>Confirm Transfer to ' + targetUser + '</font></b></button>');","\t\t}","","\t\t// now the real work","\t\tDb('cards').set(targetUser, targetCards.concat(userCards));","\t\tDb('cards').set(user.userid, []);","","\t\tDb('points').set(targetUser, getPointTotal(targetUser));","\t\tDb('points').set(user.userid, getPointTotal(user.userid));","","\t\tuser.popup(\"You have transfered all your cards to \" + targetUser + \".\");","","\t\tlet newTransfer = {","\t\t\tfrom: user.userid,","\t\t\tto: targetUser,","\t\t\ttransfer: \"all\",","\t\t};","","\t\tlet now = Date.now().toString();","\t\tDb('completedTrades').set(now, newTransfer);","\t},","","\tpsgo: 'cardshelp',","\tcardshelp: function (target, room, user) {","\t\tif (!this.runBroadcast()) return;","\t\treturn this.sendReplyBox(\"<center><b><u>PS Trading Card Game:</u></b></center><br>\" +","\t\t\t\"<b>/buypack</b> - Buys a pack from the pack shop.<br>\" +","\t\t\t\"<b>/packshop</b> - Shows the shop for buying packs.<br>\" +","\t\t\t\"<b>/openpack</b> - Opens a pack that has been purchased from the shop.<br>\" +","\t\t\t\"<b>/packs</b> - Shows a display of all your unopened packs.<br>\" +","\t\t\t\"<b>/showcase</b> - Shows a display of all cards that you have.<br>\" +","\t\t\t\"<b>/card</b> - Shows data and information on any specifc card.<br>\" +","\t\t\t\"<b>/cardladder</b> - Shows the leaderboard of the users with the most card points.<br>\" +","\t\t\t\"<b>/cardsearch</b> - Opens a window allowing you to search through all the cards.<br>\" +","\t\t\t\"<b>/trade</b> - /trade [user\\'s card], [targetUser], [targetUser\\'s card] - starts a new trade request.<br>\" +","\t\t\t\"<b>/trades</b> - View your current pending trade requests.<br>\" +","\t\t\t\"<b>/transfercard</b> - /transfercard [targetUser], [card] - transfers a card to the target user.<br>\" +","\t\t\t\"<b>/transferallcards</b> - /transferallcards [user] - transfers all of your cards to the target user.<br>\"","\t\t);","\t},","","\tgivecard: 'spawncard',","\tspawncard: function (target, room, user, connection, cmd) {","\t\tif (!this.can('declare')) return false;","\t\tif (!target) return this.errorReply(\"/givecard [user], [card ID]\");","\t\tlet parts = target.split(\",\").map(p => toId(p));","\t\t// find targetUser and the card being given.","\t\tlet targetUser = parts.shift();","\t\tlet card = parts[0].trim();","\t\tif (!targetUser || !card) return this.errorReply(\"/givecard [user], [card ID]\");","\t\tif (!cards.hasOwnProperty(card)) return this.sendReply(target + \": card not found.\");","\t\t//Give the card to the user.","\t\tcard = cards[card];","\t\taddCard(targetUser, card.title);","\t\tuser.popup(\"You have successfully given \" + card.name + \" to \" + targetUser + \".\");","\t\tthis.logModCommand(user.name + \"gave the card '\" + card.name + \"' to \" + targetUser + \".\");","\t},","","\ttakecard: function (target, room, user, connection, cmd) {","\t\tif (!this.can('declare')) return false;","\t\tif (!target) return this.errorReply(\"/takecard [user], [card ID]\");","\t\tlet parts = target.split(\",\").map(p => toId(p));","\t\t// find targetUser and the card being taken.","\t\tlet targetUser = parts.shift();","\t\tlet card = parts[0].trim();","\t\tif (!targetUser || !card) return this.errorReply(\"/takecard [user], [card ID]\");","\t\tif (!cards.hasOwnProperty(card)) return this.sendReply(target + \": card not found.\");","\t\t//Take the card from the user.","\t\tcard = cards[card];","\t\tremoveCard(card.title, targetUser);","\t\tuser.popup(\"You have successfully taken \" + card.name + \" from \" + targetUser + \".\");","\t\tthis.logModCommand(user.name + \" took the card '\" + card.name + \"' from \" + targetUser + \".\");","\t},","};",""],"id":2},{"start":{"row":0,"column":0},"end":{"row":936,"column":2},"action":"insert","lines":["'use strict';","/********************"," * Cards"," * Origins's Card System: Credit to Naten, nineage, fender, and everyone who added cards/ sparkychild for trading, searching, transfering of cards"," * All cards should be retrieved here http://www.pokemon.com/us/pokemon-tcg/pokemon-cards/"," * Cards are organized alphabetically and use a point system"," * publicids are dex numbers and any unique identifiers (if they're not a Pokemon, do a shorthand version of the card name)"," * Dex Number, (for multiple pokemon: DEX[lowercase letter, a, b, c, d])","********************/","const uuid = require('uuid');","const cards = require('./card-data.js');","let color = require('../config/color');","","const colors = {","\tMythic: '#D82A2A',","\tLegendary: '#E8AB03',","\tEpic: '#73DF14',","\tRare: '#2DD1B6',","\tUncommon: '#2D3ED1',","\tCommon: '#000',","};","","const shop = [","\t['XY-Base', 'Get three cards from the first pack released in the Pokemon XY set.', 10],","\t['XY-Flashfire', 'Get three cards from the Flashfire pack released in the Pokemon XY set.', 10],","\t['XY-Furious Fists', 'Get three cards from the Furious Fists pack released in the Pokemon XY set.', 10],","\t['XY-Phantom Forces', 'Get three cards from the Phantom Forces pack released in the Pokemon XY set.', 10],","\t['XY-Primal Clash', 'Get three cards from the Primal Clash pack released in the Pokemon XY set.', 10],","\t['XY-Roaring Skies', 'Get three cards from the Roaring Skies pack released in the Pokemon XY set.', 10],","\t['XY-Ancient Origins', 'Get three cards from the Ancient Origins pack released in the Pokemon XY set.', 10],","\t['XY-Generations', 'Get three cards from the Generations pack released in the Pokemon XY set.', 10],","\t['XY-Fates Collide', 'Get three cards from the Fates Collide pack released in the Pokemon XY set.', 10],","\t['XY-BREAKpoint', 'Get three cards from the BREAKpoint pack released in the Pokemon XY set.', 10]","];","let packShop = ['XY-Base', 'XY-Flashfire', 'XY-Furious Fists', 'XY-Phantom Forces', 'XY-Primal Clash', 'XY-Roaring Skies', 'XY-Ancient Origins', 'XY-Generations', 'XY-Fates Collide', 'XY-BREAKpoint', 'Double Crisis', 'Water', 'Fire', 'Fighting', 'Fairy', 'Dragon', 'Colorless', 'Psychic', 'Lightning', 'Darkness', 'Grass', 'OU-Pack', 'UU-Pack', 'Uber-Pack', 'PU-Pack', 'NU-Pack', 'RU-Pack', 'LC-Pack', 'BL-Pack', 'BL2-Pack', 'BL3-Pack', 'Gen1', 'Gen2', 'Gen3', 'Gen4', 'Gen5', 'Gen6', 'Metal', 'Trainer', 'Supporter', 'Item', 'Stadium', 'EX-Pack', 'Legendary', 'Full', 'Event'];","const tourCardRarity = ['No Card', 'Common', 'Uncommon', 'Rare', 'Epic', 'Epic', 'Legendary', 'Legendary', 'Mythic'];","const cardRarity = ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary', 'Mythic'];","let cleanShop = [];","let cleanCard = [];","let rareCache = []; //Used to cache cards for tours","let cardCache = []; //Used to cache cards in packs","let userPacks = {}; //Used to store users unopened packs","","function cachePacks() {","\tfor (let i = 0; i < packShop.length; i++) {","\t\tcardCache.push([]);","\t\tfor (let key in cards) {","\t\t\tif (cards.hasOwnProperty(key)) {","\t\t\t\tlet obj = cards[key];","\t\t\t\tif (obj.hasOwnProperty('collection') && obj.collection.indexOf(packShop[i]) > -1) cardCache[i].push(key);","\t\t\t}","\t\t}","\t}","\tfor (let i = 0; i < packShop.length; i++) {","\t\tcleanShop.push(toId(packShop[i]));","\t}","}","","function cacheRarity() {","\tfor (let i = 0; i < cardRarity.length; i++) {","\t\trareCache.push([]);","\t\tfor (let key in cards) {","\t\t\tif (cards.hasOwnProperty(key)) {","\t\t\t\tlet obj = cards[key];","\t\t\t\tif (obj.hasOwnProperty('rarity') && obj.rarity.indexOf(cardRarity[i]) > -1) rareCache[i].push(key);","\t\t\t}","\t\t}","\t}","\tfor (let i = 0; i < cardRarity.length; i++) {","\t\tcleanCard.push(toId(cardRarity[i]));","\t}","}","","global.tourCard = function (tourSize, userid) {","\tif (tourSize > 32) tourSize = 32;","\tlet tourRarity = tourCardRarity[Math.floor(tourSize / 2)];","\tlet cacheValue = rareCache[cleanCard.indexOf(toId(tourRarity))];","\tlet card = cacheValue[Math.round(Math.random() * (cacheValue.length - 1))];","\tif (tourRarity === 'No Card') return;","\taddCard(userid, card);","\treturn [colors[cards[card].rarity], cards[card].rarity, cards[card].title, cards[card].name];","};","","function addCard(name, card) {","\tlet newCard = {};","\tnewCard.id = uuid.v1();","\tnewCard.title = cards[card].title;","\tnewCard.card = cards[card].card;","\tnewCard.name = cards[card].name;","\tnewCard.rarity = cards[card].rarity;","\tnewCard.points = cards[card].points;","","\tlet userid = toId(name);","\tDb('cards').set(userid, Db('cards').get(userid, []).concat([newCard]));","\tDb('points').set(userid, Db('points').get(userid, 0) + newCard.points);","}","","function removeCard(cardTitle, userid) {","\tlet userCards = Db('cards').get(userid, []);","\tlet idx = -1;","\t// search for index of the card","\tfor (let i = 0; i < userCards.length; i++) {","\t\tlet card = userCards[i];","\t\tif (card.title === cardTitle) {","\t\t\tidx = i;","\t\t\tbreak;","\t\t}","\t}","\tif (idx === -1) return false;","\t// remove it","\tuserCards.splice(idx, 1);","\t// set it in db","\tDb('cards').set(userid, userCards);","\treturn true;","}","","function getPointTotal(userid) {","\tlet totalCards = Db('cards').get(userid, []);","\tlet total = 0;","\tfor (let i = 0; i < totalCards.length; i++) {","\t\ttotal += totalCards[i].points;","\t}","\treturn total;","}","","function rankLadder(title, type, array, prop, group) { //Will clean up someday (tm)","\tlet groupHeader = group || 'Username';","\tconst ladderTitle = '<center><h4><u>' + title + '</u></h4></center>';","\tconst thStyle = 'class=\"rankladder-headers default-td\" style=\"background: -moz-linear-gradient(#576468, #323A3C); background: -webkit-linear-gradient(#576468, #323A3C); background: -o-linear-gradient(#576468, #323A3C); background: linear-gradient(#576468, #323A3C); box-shadow: -1px -1px 2px rgba(0, 0, 0, 0.3) inset, 1px 1px 1px rgba(255, 255, 255, 0.7) inset;\"';","\tconst tableTop = '<div style=\"max-height: 310px; overflow-y: scroll;\">' +","\t\t'<table style=\"width: 100%; border-collapse: collapse;\">' +","\t\t'<tr>' +","\t\t\t'<th ' + thStyle + '>Rank</th>' +","\t\t\t'<th ' + thStyle + '>' + groupHeader + '</th>' +","\t\t\t'<th ' + thStyle + '>' + type + '</th>' +","\t\t'</tr>';","\tconst tableBottom = '</table></div>';","\tconst tdStyle = 'class=\"rankladder-tds default-td\" style=\"box-shadow: -1px -1px 2px rgba(0, 0, 0, 0.3) inset, 1px 1px 1px rgba(255, 255, 255, 0.7) inset;\"';","\tconst first = 'class=\"first default-td important\" style=\"box-shadow: -1px -1px 2px rgba(0, 0, 0, 0.3) inset, 1px 1px 1px rgba(255, 255, 255, 0.7) inset;\"';","\tconst second = 'class=\"second default-td important\" style=\"box-shadow: -1px -1px 2px rgba(0, 0, 0, 0.3) inset, 1px 1px 1px rgba(255, 255, 255, 0.7) inset;\"';","\tconst third = 'class=\"third default-td important\" style=\"box-shadow: -1px -1px 2px rgba(0, 0, 0, 0.3) inset, 1px 1px 1px rgba(255, 255, 255, 0.7) inset;\"';","\tlet midColumn;","\tconst length = array.length;","","\tlet tableRows = '';","","\tfor (let i = 0; i < length; i++) {","\t\tif (i === 0) {","\t\t\tmidColumn = '</td><td ' + first + '>';","\t\t\ttableRows += '<tr><td ' + first + '>' + (i + 1) + midColumn + array[i].name + midColumn + array[i][prop] + '</td></tr>';","\t\t} else if (i === 1) {","\t\t\tmidColumn = '</td><td ' + second + '>';","\t\t\ttableRows += '<tr><td ' + second + '>' + (i + 1) + midColumn + array[i].name + midColumn + array[i][prop] + '</td></tr>';","\t\t} else if (i === 2) {","\t\t\tmidColumn = '</td><td ' + third + '>';","\t\t\ttableRows += '<tr><td ' + third + '>' + (i + 1) + midColumn + array[i].name + midColumn + array[i][prop] + '</td></tr>';","\t\t} else {","\t\t\tmidColumn = '</td><td ' + tdStyle + '>';","\t\t\ttableRows += '<tr><td ' + tdStyle + '>' + (i + 1) + midColumn + array[i].name + midColumn + array[i][prop] + '</td></tr>';","\t\t}","\t}","\treturn ladderTitle + tableTop + tableRows + tableBottom;","}","","function getShopDisplay(shop) {","\tlet display = \"<table width='100%' border='1' style='border-collapse: collapse; color: #444; box-shadow: 2px 3px 5px rgba(0, 0, 0, 0.2);' cellpadding='5'>\" +","\t\t\"<tr><th class='card-th' style='background-image: -moz-linear-gradient(center top , #EBF3FC, #DCE9F9); box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.8) inset;'>Command</th><th class='card-th' style='background-image: -moz-linear-gradient(center top , #EBF3FC, #DCE9F9); box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.8) inset;'>Description</th><th class='card-th' style='background-image: -moz-linear-gradient(center top , #EBF3FC, #DCE9F9); box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.8) inset;'>Cost</th></tr>\";","\tlet start = 0;","\twhile (start < shop.length) {","\t\tdisplay += \"<tr>\" + \"<td class='card-td'><button name='send' value='/buypack \" + shop[start][0] + \"' style='border-radius: 12px; box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2) inset;'><b>\" + shop[start][0] + \"</b></button></td>\" +","\t\t\t\"<td class='card-td'>\" + shop[start][1] + \"</td>\" +","\t\t\t\"<td class='card-td'>\" + shop[start][2] + \"</td>\" +","\t\t\t\"</tr>\";","\t\tstart++;","\t}","\tdisplay += \"</table><center>To buy a pack from the shop, use /buypack <em>pack</em>.</center>\";","\treturn display;","}","","function toTitleCase(str) {","\treturn str.replace(/(\\w\\S*)/g, function (txt) {","\t\treturn txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();","\t});","}","","cachePacks();","cacheRarity();","","exports.commands = {","\tpacks: 'pack',","\tpack: function (target, room, user) {","\t\tif (!this.runBroadcast()) return;","\t\tif (!target) target = user.name;","\t\ttarget = toId(target);","\t\tif (!userPacks[target] || userPacks[target].length === 0) return this.sendReply((target === user.userid ? 'You have' : target + ' has') + ' no packs.');","\t\tthis.sendReply('|raw|<u><b>List of packs:</b></u>');","\t\tfor (let i = 0; i < userPacks[target].length; i++) {","\t\t\tthis.sendReply('|raw| <button name=\"send\" value=\"/openpack ' + userPacks[target][i] + '\"> Press to open <b>' + toTitleCase(userPacks[target][i]) + '</b> pack</button>');","\t\t}","\t},","","\tbuypacks: 'buypack',","\tbuypack: function (target, room, user) {","\t\tif (!target) return this.sendReply(\"/buypack - Buys a pack from the pack shop. Alias: /buypacks\");","\t\tlet self = this;","\t\tlet packId = toId(target);","\t\tlet amount = Db('money').get(user.userid, 0);","\t\tif (cleanShop.indexOf(packId) < 0) return self.sendReply(\"This is not a valid pack. Use /packshop to see all packs.\");","\t\tlet shopIndex = cleanShop.indexOf(toId(target));","\t\tif (packId !== 'xybase' && packId !== 'xyfuriousfists' && packId !== 'xyflashfire' && packId !== 'xyphantomforces' && packId !== 'xyroaringskies' && packId !== 'xyprimalclash' && packId !== 'xyancientorigins' && packId !== 'xygenerations' && packId !== 'xyfatescollide' && packId !== 'xybreakpoint') return self.sendReply(\"This pack is not currently in circulation.  Please use /packshop to see the current packs.\");","\t\tlet cost = shop[shopIndex][2];","\t\tif (cost > amount) return self.sendReply(\"You need \" + (cost - amount) + \" more bucks to buy this pack.\");","\t\tlet total = Db('money').set(user.userid, amount - cost).get(user.userid);","\t\tlet pack = toId(target);","\t\tself.sendReply('|raw|You have bought ' + target + ' pack for ' + cost +","\t\t\t' bucks. Use <button name=\"send\" value=\"/openpack ' +","\t\t\tpack + '\"><b>/openpack ' + pack + '</b></button> to open your pack.');","\t\tself.sendReply(\"You have until the server restarts to open your pack.\");","\t\tif (!userPacks[user.userid]) userPacks[user.userid] = [];","\t\tuserPacks[user.userid].push(pack);","\t\tif (room.id !== 'lobby' && room.id !== 'casino') room.addRaw(user.name + ' has bought <b>' + target + ' pack </b> from the shop.');","\t\troom.update();","\t},","","\tpackshop: function (target, room, user) {","\t\tif (!this.runBroadcast()) return;","\t\treturn this.sendReply('|raw|' + getShopDisplay(shop));","\t},","","\topen: 'openpack',","\topenpacks: 'openpack',","\topenpack: function (target, room, user) {","\t\tif (!this.runBroadcast()) return;","\t\tif (!target) {","\t\t\tthis.sendReply(\"/openpack [pack] - Open a Pokemon Card Pack. Alias: /open, /openpacks\");","\t\t\treturn this.parse('/packs');","\t\t}","\t\tif (cleanShop.indexOf(toId(target)) < 0) return this.sendReply(\"This pack does not exist.\");","\t\tif (!userPacks[user.userid] || userPacks[user.userid].length === 0) return this.sendReply(\"You have no packs.\");","\t\tif (userPacks[user.userid].indexOf(toId(target)) < 0) return this.sendReply(\"You do not have this pack.\");","\t\tlet newPack;","\t\tfor (let i = 0; i < 3; i++) {","\t\t\tnewPack = toId(target);","\t\t\tlet cacheValue = cardCache[cleanShop.indexOf(toId(target))];","\t\t\tlet card = cacheValue[Math.round(Math.random() * (cacheValue.length - 1))];","\t\t\taddCard(user.userid, card);","\t\t\tlet cardName = cards[card].name;","\t\t\tlet packName = packShop[cleanShop.indexOf(toId(target))];","\t\t\tthis.sendReplyBox(user.name + ' got <font color=\"' + colors[cards[card].rarity] + '\">' + cards[card].rarity + '</font>' +","\t\t\t'<button name=\"send\" value=\"/card ' + card + '\"><b>' + cardName + '</b></button> from a' +","\t\t\t'<button name=\"send\" value=\"/buypack ' + packName + '\">' + packName + ' Pack</button>.');","\t\t}","\t\tlet usrIndex = userPacks[user.userid].indexOf(newPack);","\t\tuserPacks[user.userid].splice(usrIndex, 1);","\t},","","\tgivepacks: 'givepack',","\tgivepack: function (target, room, user) {","\t\tif (!user.can('declare')) return this.errorReply(\"/givepack - Access denied.\");","\t\tif (!target) return this.sendReply(\"/givepack [user], [pack] - Give a user a pack.\");","\t\tlet parts = target.split(',');","\t\tthis.splitTarget(parts[0]);","\t\tif (!parts[1]) return this.sendReply(\"/givepack [user], [pack] - Give a user a pack.\");","\t\tlet pack = toId(parts[1]);","\t\tlet userid = toId(this.targetUsername);","\t\tif (cleanShop.indexOf(pack) < 0) return this.sendReply(\"This pack does not exist.\");","\t\tif (!this.targetUser) return this.sendReply(\"User '\" + this.targetUsername + \"' not found.\");","\t\tif (!userPacks[userid]) userPacks[userid] = [];","\t\tuserPacks[userid].push(pack);","\t\tthis.sendReply(this.targetUsername + \" was given \" + pack + \" pack. This user now has \" + userPacks[userid].length + \" pack(s).\");","\t\tUsers.get(this.targetUsername).connections[0].sendTo(room.id,","\t\t\t'|raw|' + user.name + ' has given you ' + pack + ' pack. You have until the server restarts to open your pack.' +","\t\t\t'Use <button name=\"send\" value=\"/openpack ' + pack + '\"><b>/openpack ' + pack + '</b></button> to open your pack.');","\t},","","\ttakepacks: 'takepack',","\ttakepack: function (target, room, user) {","\t\tif (!user.can('takepack')) return this.errorReply(\"/takepack - Access denied.\");","\t\tif (!target) return this.sendReply(\"/takepack [user], [pack] - Take a pack from a user.\");","\t\tlet parts = target.split(',');","\t\tthis.splitTarget(parts[0]);","\t\tif (!parts[1]) return this.sendReply(\"/takepack [user], [pack] - Take a pack from a user.\");","\t\tlet pack = toId(parts[1]);","\t\tlet userid = toId(this.targetUsername);","\t\tlet packIndex = userPacks[userid].indexOf(pack);","\t\tif (packShop.indexOf(pack) < 0) return this.sendReply(\"This pack does not exist.\");","\t\tif (!this.targetUser) return this.sendReply(\"User '\" + this.targetUsername + \"' not found.\");","\t\tif (!userPacks[userid]) userPacks[userid] = [];","\t\tif (packIndex < 0) return this.sendReply(\"This user does not have this pack.\");","\t\tuserPacks[userid].splice(packIndex, 1);","\t\tthis.sendReply(this.targetUsername + \" lost \" + pack + \" pack. This user now has \" + userPacks[userid].length + \" pack(s).\");","\t\tUsers.get(this.targetUsername).send('|raw|' + user.name + ' has taken ' + pack + ' pack from you. You now have ' + userPacks[userid].length + ' pack(s).');","\t},","","\tshowcards: 'showcase',","\tshowcard: 'showcase',","\tshowcase: function (target, room, user) {","\t\tif (!this.runBroadcast()) return;","\t\tlet userid = user.userid;","\t\tif (target) userid = toId(target);","\t\tconst cards = Db('cards').get(userid, []);","\t\tif (!cards.length) return this.sendReplyBox(userid + \" has no cards.\");","\t\tconst cardsMapping = cards.map(function (card) {","\t\t\treturn '<button name=\"send\" value=\"/card ' + card.title + '\" style=\"border-radius: 12px; box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2) inset;\" class=\"card-button\"><img src=\"' + card.card + '\" width=\"80\" title=\"' + card.name + '\"></button>';","\t\t});","\t\tthis.sendReplyBox('<div style=\"max-height: 300px; overflow-y: scroll;\">' + cardsMapping.join('') + '</div><br><center><b><font color=\"' + color(userid) + '\">' + userid + '</font> has ' + cards.length + ' cards and ' + getPointTotal(userid) + ' points.</b></center>');","\t},","","\tcard: function (target, room, user) {","\t\tif (!target) return this.sendReply(\"/card [name] - Shows information about a card.\");","\t\tif (!this.runBroadcast()) return;","\t\tlet cardName = toId(target);","\t\tif (!cards.hasOwnProperty(cardName)) return this.sendReply(target + \": card not found.\");","\t\tlet card = cards[cardName];","\t\tlet html = '<div class=\"card-div card-td\" style=\"box-shadow: 2px 3px 5px rgba(0, 0, 0, 0.2);\"><img src=\"' + card.card + '\" height=\"220\" title=\"' + card.name + '\" align=\"right\">' +","\t\t\t'<span class=\"card-name\" style=\"border-bottom-right-radius: 2px; border-bottom-left-radius: 2px; background-image: -moz-linear-gradient(center top , #EBF3FC, #DCE9F9);  box-shadow: 0px 1px 0px rgba(255, 255, 255, 0.8) inset, 0px 0px 2px rgba(0, 0, 0, 0.2);\">' + card.title + '</span>' +","\t\t\t'<br /><br /><h1><font color=\"' + colors[card.rarity] + '\">' + card.rarity + '</font></h1>' +","\t\t\t'<br /><br /><font color=\"#AAA\"><i>Points:</i></font> ' + card.points +","\t\t\t'<br /><br /><font color=\"#AAA\"><i>Found in Packs:</i></font>' + card.collection.join(', ') +","\t\t\t'<br clear=\"all\">';","\t\tthis.sendReply('|raw|' + html);","\t},","","\tcardladder: function (target, room, user) {","\t\tif (!this.runBroadcast()) return;","\t\tlet keys = Object.keys(Db('points').object()).map(function (name) {","\t\t\treturn {name: name, points: getPointTotal(name)};","\t\t});","\t\tif (!keys.length) return this.sendReplyBox(\"Card ladder is empty.\");","\t\tkeys.sort(function (a, b) { return b.points - a.points; });","\t\tthis.sendReplyBox(rankLadder('Card Ladder', 'Points', keys.slice(0, 100), 'points'));","\t},","","\tcs: 'cardsearch',","\tcardsearch: 'searchcard',","\tsearchcard: function (target, room, user) {","\t\tconst letters = \"abcdefghijklmnopqrstuvwxyz\".split(\"\");","\t\tconst categories = {","\t\t\tRarity: ['Common', 'Uncommon', 'Rare', 'Epic', 'Legendary', 'Mythic'], // rarities","\t\t\tPacks: ['XY-Promo', 'XY-Base', 'XY-Flashfire', 'XY-Furious Fists', 'XY-Phantom Forces', 'XY-Primal Clash', 'XY-Roaring Skies', 'XY-Ancient Origins', 'Double Crisis', 'XY-Generations', 'XY-Fates Collide', 'XY-BREAKpoint'],","\t\t\tTypes: ['Water', 'Fire', 'Fighting', 'Fairy', 'Dragon', 'Colorless', 'Psychic', 'Lightning', 'Darkness', 'Grass', 'Metal'],","\t\t\tTiers: ['OU-Pack', 'UU-Pack', 'Uber-Pack', 'PU-Pack', 'NU-Pack', 'RU-Pack', 'LC-Pack', 'BL-Pack', 'BL2-Pack', 'BL3-Pack'],","\t\t\tGeneration: ['Gen1', 'Gen2', 'Gen3', 'Gen4', 'Gen5', 'Gen6'],","\t\t\tMiscellaneous: ['Trainer', 'Supporter', 'Item', 'Stadium', 'Energy', 'Delta', 'EX-Pack', 'Mega', 'Legendary', 'Full', 'Event'],","\t\t};","","\t\tconst scrollable = \"<div style=\\\"max-height: 300px; overflow-y: scroll\\\">\"; // code for scrollable html","\t\tconst divEnd = \"</div>\";","\t\tconst definePopup = \"|wide||html|<center><b>CardSearch</b></center><br />\";","\t\tconst generalMenu = \"<center>\" +","\t\t\t'<button name=\"send\" value=\"/searchcard letter\" style=\\\"background-color:aliceblue;height:30px\\\">Alphabetical</button>&nbsp;&nbsp;' + // alphabetical","\t\t\t'<button name=\"send\" value=\"/searchcard category\" style=\\\"background-color:aliceblue;height:30px\\\">Categories</button>&nbsp;&nbsp;' + // category","\t\t\t'</center><br />';","\t\tif (!target) {","\t\t\treturn user.popup(definePopup + generalMenu);","\t\t}","\t\t// quick fix for when target ends with a comma","\t\ttarget = target.replace(/\\,[\\s]+$/i, \"\");","\t\tlet parts = target.split(\",\");","\t\tlet actionCommand = parts.shift();","\t\tlet cardDisplay;","\t\tswitch (toId(actionCommand)) {","\t\tcase 'letter':","\t\t\tlet letter = toId(parts[0]);","","\t\t\tconst letterMenu = '<center>' + letters.map(l => {","\t\t\t\treturn '<button name=\"send\" value=\"/searchcard letter, ' + l + '\" ' + (letter === l ? \"style=\\\"background-color:lightblue;height:30px;width:35px\\\"\" : \"style=\\\"background-color:aliceblue;height:30px;width:35px\\\"\") + \">\" + l.toUpperCase() + \"</button>\";","\t\t\t}).join(\"&nbsp;\") + \"</center><br />\";","","\t\t\tif (!letter || letters.indexOf(letter) === -1) {","\t\t\t\t// invalid letter to search for, or none given","\t\t\t\t// only show menu","\t\t\t\treturn user.popup(definePopup + generalMenu + letterMenu);","\t\t\t}","\t\t\t// sort cards by letter","\t\t\tlet letterMons = {};","\t\t\tfor (let m in cards) {","\t\t\t\tif (!letterMons[m.charAt(0)]) letterMons[m.charAt(0)] = {};","\t\t\t\tletterMons[m.charAt(0)][m] = 1;","\t\t\t}","","\t\t\tif (!letterMons[letter]) return user.popup(definePopup + generalMenu + letterMenu);","\t\t\t// make graphics for the letter","\t\t\tcardDisplay = Object.keys(letterMons[letter]).sort().map(m => {","\t\t\t\tlet card = cards[m];","\t\t\t\treturn '<button name=\"send\" value=\"/searchcard card, ' + card.title + '\" style=\"border-radius: 12px; box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2) inset;\" class=\"card-button\"><img src=\"' + card.card + '\" width=\"100\" title=\"' + card.name + '\"></button>';","\t\t\t}).join(\"&nbsp;\");","\t\t\t// send the popup","\t\t\tuser.lastCardSearch = target;","\t\t\tuser.popup(definePopup + generalMenu + letterMenu + scrollable + cardDisplay + divEnd);","\t\t\tbreak;","\t\tcase 'category':","\t\t\t// clean all the parts first","\t\t\tparts = parts.map(p => {","\t\t\t\treturn toId(p);","\t\t\t});","","\t\t\t// create category menu","\t\t\tlet categoryMenu = \"\";","\t\t\tfor (let c in categories) {","\t\t\t\tcategoryMenu += '<b>' + c + ' -</b> ' + categories[c].map(k => {","\t\t\t\t\tlet m = toId(k);","\t\t\t\t\t// add a special search condition for rarity","\t\t\t\t\tif (c === \"Rarity\") m += \"rarity\";","","\t\t\t\t\t// new params for the search","\t\t\t\t\t// clone parts","\t\t\t\t\tlet newParams = parts.slice(0);","\t\t\t\t\tif (parts.indexOf(m) > -1) {","\t\t\t\t\t\t// remove it","\t\t\t\t\t\tnewParams.splice(newParams.indexOf(m), 1);","\t\t\t\t\t} else {","\t\t\t\t\t\tnewParams.push(m);","\t\t\t\t\t}","","\t\t\t\t\tlet style = (parts.indexOf(m) > -1 ? \"style=\\\"background-color:lightblue;height:23\\\"\" : \"style=\\\"background-color:aliceblue;height:23\\\"\"); // button style checking if currently searching","","\t\t\t\t\treturn '<button name=\"send\" value=\"/searchcard category, ' + newParams.join(\", \") + '\" ' + style + '>' + k + '</button>';","\t\t\t\t}).join(\"&nbsp;\") + \"<br />\";","\t\t\t}","\t\t\tif (!parts.length) {","\t\t\t\treturn user.popup(definePopup + generalMenu + categoryMenu);","\t\t\t}","\t\t\t// now clone the cards and delete the ones who dont match the categories","\t\t\tlet paramCards = Object.assign({}, cards);","","\t\t\t// filter out the unneeded ones; ignore rarity","\t\t\tfor (let i = 0; i < parts.length; i++) {","\t\t\t\tlet param = parts[i];","\t\t\t\t// ignore rarity","\t\t\t\tif (/rarity$/i.test(param)) continue;","\t\t\t\tfor (let c in paramCards) {","\t\t\t\t\tlet cardParams = paramCards[c].collection.join(\"~\").toLowerCase().replace(/[^a-z0-9\\~]/g, \"\").split(\"~\");","\t\t\t\t\tif (cardParams.indexOf(param) === -1) delete paramCards[c]; // remove the card from the currently searched ones.","\t\t\t\t}","\t\t\t}","","\t\t\t// seperate check for rarity","\t\t\tlet rarityCheck = parts.some(a => {","\t\t\t\treturn /rarity$/i.test(a);","\t\t\t});","\t\t\tif (rarityCheck) {","\t\t\t\tfor (let c in paramCards) {","\t\t\t\t\tlet cardRare = toId(paramCards[c].rarity);","\t\t\t\t\tfor (let i = 0; i < parts.length; i++) {","\t\t\t\t\t\tif (/rarity$/i.test(parts[i])) {","\t\t\t\t\t\t\t// check if rarity is the card's rarity","\t\t\t\t\t\t\tif (parts[i].replace(/rarity$/i, \"\") !== cardRare) {","\t\t\t\t\t\t\t\t// remove if not matched","\t\t\t\t\t\t\t\tdelete paramCards[c];","\t\t\t\t\t\t\t}","\t\t\t\t\t\t}","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","","\t\t\t// no cards left","\t\t\tif (!Object.keys(paramCards).length) {","\t\t\t\treturn user.popup(definePopup + generalMenu + categoryMenu + '<br /><center><font color=\"red\"><b>Nothing matches your search</b></font></center>');","\t\t\t}","\t\t\tuser.lastCardSearch = target;","\t\t\t// build the display","\t\t\tcardDisplay = Object.keys(paramCards).sort().map(m => {","\t\t\t\tlet card = paramCards[m];","\t\t\t\treturn '<button name=\"send\" value=\"/searchcard card, ' + card.title + '\" style=\"border-radius: 12px; box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2) inset;\" class=\"card-button\"><img src=\"' + card.card + '\" width=\"100\" title=\"' + card.name + '\"></button>';","\t\t\t}).join(\"&nbsp;\");","\t\t\tuser.popup(definePopup + generalMenu + categoryMenu + scrollable + cardDisplay + divEnd);","\t\t\tbreak;","\t\tcase 'card':","\t\t\tlet backButton = '<button name=\"send\" value=\"/cardsearch ' + user.lastCardSearch + '\" style=\"background-color:aliceblue;height:30px;width:35\">&lt;&nbsp;Back</button><br /><br />';","\t\t\tif (!parts[0] || !(toId(parts[0]) in cards)) {","\t\t\t\treturn user.popup(definePopup + backButton + '<center><font color=\"red\"><b>Invalid Card</b></font></center>');","\t\t\t}","","\t\t\t// build the display screen for the card","\t\t\tlet card = cards[toId(parts[0])];","\t\t\t// the image","\t\t\tlet cardImage = '<img src=\"' + card.card + '\" height=250>';","\t\t\t// the name of the card","\t\t\tlet cardName = \"<b>Name:</b> \" + card.name + \"<br />\";","\t\t\t// the id of the card","\t\t\tlet cardId = \"<font color=\\\"gray\\\">(\" + card.title + \")</font><br />\";","\t\t\t// rarity display","\t\t\tlet cardRarityPoints = '<b>Rarity: </b><font color=\"' + colors[card.rarity] + '\">' + card.rarity + '</font> (' + card.points + ')<br />';","\t\t\t// collections","\t\t\tlet cardCollection = '<b>Packs: </b>' + card.collection.join(\", \") + \"<br />\";","\t\t\t// get users that have the card","\t\t\tlet allCardUsers = Db('cards').object();","\t\t\tlet cardHolders = [];","\t\t\t// dont allow duplicates","\t\t\tfor (let u in allCardUsers) {","\t\t\t\tlet userData = allCardUsers[u];","\t\t\t\tfor (let i = 0; i < userData.length; i++) {","\t\t\t\t\tlet tC = userData[i];","\t\t\t\t\tif (tC && tC.title === card.title) {","\t\t\t\t\t\tif (!cardHolders[u]) cardHolders[u] = 0;","\t\t\t\t\t\tcardHolders[u]++;","\t\t\t\t\t}","\t\t\t\t}","\t\t\t}","\t\t\t// show duplicates as (x#)","\t\t\tcardHolders = Object.keys(cardHolders).sort().map(u => {","\t\t\t\treturn \"&nbsp;- \" + u + (cardHolders[u] > 1 ? \" (x\" + cardHolders[u] + \")\" : \"\");","\t\t\t});","","\t\t\t// build the display!","\t\t\tcardDisplay = \"<center><table><tr>\" +","\t\t\t\t\"<td>\" + cardImage + \"</td>\" + // Card on the left","\t\t\t\t\"<td>\" + // details now","\t\t\t\tcardName + cardId + cardRarityPoints + cardCollection +","\t\t\t\t\"<b>Users with this card:</b><br />\" + // card holders","\t\t\t\t\"<div style=\\\"max-height: 130px; overflow-y: scroll\\\">\" + // scrollable","\t\t\t\tcardHolders.join(\"<br />\") + \"<br />\" +","\t\t\t\t\"</td></tr></table></center>\"; // close the table","","\t\t\tuser.popup(definePopup + backButton + cardDisplay);","\t\t\tbreak;","\t\tcase 'error':","\t\tdefault:","\t\t\tuser.popup(definePopup + generalMenu + '<br /><center><font color=\"red\"><b>Invalid Command action for CardSearch</b></font></center>');","\t\t\tbreak;","\t\t}","\t},","","\ttrade: 'tradecard',","\ttradecard: function (target, room, user) {","\t\tif (!target) return this.errorReply(\"/tradecard [card ID], [user], [targetCard ID]\");","\t\tlet parts = target.split(\",\").map(p => toId(p));","\t\tif (parts.length !== 3) return this.errorReply(\"/tradecard [your card's ID], [targetUser], [targetCard ID]\");","\t\tlet match;","","\t\t// check for user's card","\t\tlet forTrade = parts[0];","\t\tmatch = false;","\t\tlet userCards = Db('cards').get(user.userid, []);","\t\tfor (let i = 0; i < userCards.length; i++) {","\t\t\tif (userCards[i].title === forTrade) {","\t\t\t\tmatch = true;","\t\t\t\tbreak;","\t\t\t}","\t\t}","\t\tif (!match) return this.errorReply(\"You don't have that card!\");","","\t\t// check for target's card","\t\tlet targetUser = parts[1];","\t\tlet targetTrade = parts[2];","","\t\tlet targetCards = Db('cards').get(targetUser, []);","\t\tmatch = false;","\t\tfor (let i = 0; i < targetCards.length; i++) {","\t\t\tif (targetCards[i].title === targetTrade) {","\t\t\t\tmatch = true;","\t\t\t\tbreak;","\t\t\t}","\t\t}","","\t\tif (!match) return this.errorReply(targetUser + \" does not have that card!\");","","\t\t// initiate trade","\t\tlet tradeId = uuid.v1();","\t\tlet newTrade = {","\t\t\tfrom: user.userid,","\t\t\tto: targetUser,","\t\t\tfromExchange: forTrade,","\t\t\ttoExchange: targetTrade,","\t\t\tid: tradeId,","\t\t};","","\t\tDb('cardtrades').set(tradeId, newTrade);","","\t\t// send messages","\t\tthis.sendReply(\"Your trade has been taken submitted.\");","\t\tif (Users.get(targetUser)) Users.get(targetUser).send(\"|pm|~GlaciaCardTradeClient|\" + targetUser + \"|/html <div class=\\\"broadcast-green\\\">\" + Tools.escapeHTML(user.name) + \" has initiated a trade with you.  Click <button name=\\\"send\\\" value=\\\"/trades last\\\">here</button> or use <b>/trades</b> to view your pending trade requests.</div>\");","\t\tuser.send(\"|pm|~GlaciaCardTradeClient|\" + user.userid + \"|/html <div class=\\\"broadcast-green\\\">Your trade with \" + Tools.escapeHTML(targetUser) + \" has been initiated.  Click <button name=\\\"send\\\" value=\\\"/trades last\\\">here</button> or use <b>/trades</b> to view your pending trade requests.</div>\");","\t},","","\ttrades: 'viewcardtrades',","\tviewcardtrades: function (target, room, user) {","\t\t// popup variables","\t\tconst popup = \"|html|<center><b><font color=\\\"blue\\\">Trade Manager</font></b></center><br />\";","","\t\t// get the user's trades","\t\tlet allTrades = Db('cardtrades').object();","\t\tlet userTrades = [];","\t\tfor (let id in allTrades) {","\t\t\tlet trade = allTrades[id];","\t\t\tif (trade.from === user.userid || trade.to === user.userid) {","\t\t\t\t// push this into the user's trade data","\t\t\t\tuserTrades.push(trade);","\t\t\t}","\t\t}","","\t\t// if no pending trades","\t\tif (!userTrades.length) return user.popup(popup + \"<center>You have no pending trades.</center>\");","","\t\t// build trade manager screen","\t\t// decide which trade to display","\t\tif (target === \"last\") {","\t\t\ttarget = userTrades.length - 1;","\t\t} else {","\t\t\t// when there is no target (initial use of command)","\t\t\tif (!target) target = 0;","\t\t\ttarget = parseInt(target);","\t\t\tif (isNaN(target)) target = 0;","\t\t\tif (target < 0) target = 0;","\t\t\tif (target >= userTrades.length) target = userTrades.length - 1;","\t\t}","","\t\t// show trade details","\t\tlet displayTrade = userTrades[target];","\t\tconst acceptReject = '<center>' + (displayTrade.from === user.userid ? \"\" : '<button name=\"send\" value=\"/tradeaction accept, ' + displayTrade.id + '\" style=\\\"background-color:green;height:30px\\\"><b>Accept</b></button>') + // accept button","\t\t\t'&nbsp;&nbsp;' + // spacing","\t\t\t'<button name=\"send\" value=\"/tradeaction ' + (displayTrade.from === user.userid ? \"cancel\" : \"reject\") + ', ' + displayTrade.id + '\" style=\\\"background-color:red;height:30px\\\"><b>' + (displayTrade.from === user.userid ? \"Cancel\" : \"Reject\") + '</b></button></center>' + // reject button","\t\t\t'<br /><br />'; // new line","","\t\t// build the user's card first","\t\tlet card = cards[(displayTrade.from === user.userid ? displayTrade.fromExchange : displayTrade.toExchange)];","\t\t// the image","\t\tlet cardImage = '<img src=\"' + card.card + '\" height=250>';","\t\t// rarity display","\t\tlet cardRarityPoints = '(<font color=\"' + colors[card.rarity] + '\">' + card.rarity + '</font> - ' + card.points + ')<br />';","\t\tlet userSideDisplay = '<center>' + user.userid + '<br />' + cardImage + \"<br />\" + cardRarityPoints + '</center>';","","\t\t// now build the target's side","\t\tcard = cards[(displayTrade.from !== user.userid ? displayTrade.fromExchange : displayTrade.toExchange)];","\t\t// the image","\t\tcardImage = '<img src=\"' + card.card + '\" height=250>';","\t\t// rarity display","\t\tcardRarityPoints = '(<font color=\"' + colors[card.rarity] + '\">' + card.rarity + '</font> - ' + card.points + ')<br />';","\t\tlet targetSideDisplay = \"<center>\" + (displayTrade.from !== user.userid ? displayTrade.from : displayTrade.to) + '<br />' + cardImage + \"<br />\" + cardRarityPoints + \"</center>\";","","\t\t// now build the entire popup","\t\tlet tradeScreen = popup + // base popup","\t\t\t'<center><table><tr><td>' + // table element","\t\t\tuserSideDisplay +","\t\t\t'</td><td>' + // next column","\t\t\ttargetSideDisplay +","\t\t\t'</td></tr></table></center><br />' + // close table and add new line","\t\t\tacceptReject;","","\t\t// build the navigation bar","\t\t// build max and min","\t\tlet navigationButtons;","\t\tif (userTrades.length === 1) {","\t\t\tnavigationButtons = '<center><button style=\"background-color:deepskyblue;height:30px;width:30px\">1</button></center>';","\t\t} else {","\t\t\t// build min and mas","\t\t\tlet min = '<button style=\"background-color:lightblue;height:30px;width:30px\" name=\"send\" value=\"/viewcardtrades 0\">1</button>&nbsp;&nbsp;&nbsp;';","\t\t\tlet max = '&nbsp;&nbsp;&nbsp;<button style=\"background-color:lightblue;height:30px;width:30px\" name=\"send\" value=\"/viewcardtrades last\">' + (userTrades.length) + '</button>';","\t\t\t// lazy replace for colour","\t\t\tif (target === 0) min = min.replace(\"background-color:lightblue;height:30px\", \"background-color:deepskyblue;height:30px\");","\t\t\tif (target === userTrades.length - 1) max = max.replace(\"background-color:lightblue;height:30px\", \"background-color:deepskyblue;height:30px\");","","\t\t\tlet middle = \"\";","\t\t\t// build range","\t\t\tlet range = Object.keys(userTrades).slice(1, userTrades.length - 1); // remove min and max and turn it into a array of numbers","\t\t\tif (range.length !== 0) { // only build middle buttons is there is none","\t\t\t\tif (range.length > 5) {","\t\t\t\t\t// find the current one and get 2 above and below","\t\t\t\t\tlet displayRange = [target - 2, target - 1, target, target + 1, target + 2].filter(i => {","\t\t\t\t\t\treturn i > 0 && i <= range.length;","\t\t\t\t\t});","\t\t\t\t\t// build middle buttons","\t\t\t\t\tmiddle = (displayRange[0] !== 1 ? \"... \" : \"\") + displayRange.map(n => {","\t\t\t\t\t\tn = parseInt(n);","\t\t\t\t\t\tlet style = n === target ? \"background-color:deepskyblue;height:30px;width:30px\" : \"background-color:aliceblue;height:30px;width:30px\";","\t\t\t\t\t\treturn '<button style=\"' + style + '\" name=\"send\" value=\"/viewcardtrades ' + n + '\">' + (n + 1) + '</button>';","\t\t\t\t\t}).join(\"&nbsp;\") + (displayRange[displayRange.length - 1] !== range.length ? \" ...\" : \"\");","\t\t\t\t} else {","\t\t\t\t\t// just map the range","\t\t\t\t\tmiddle = range.map(n => {","\t\t\t\t\t\tn = parseInt(n);","\t\t\t\t\t\tlet style = n === target ? \"background-color:deepskyblue;height:30px;width:30px\" : \"background-color:aliceblue;height:30px;width:30px\";","\t\t\t\t\t\treturn '<button style=\"' + style + '\" name=\"send\" value=\"/viewcardtrades ' + n + '\">' + (n + 1) + '</button>';","\t\t\t\t\t}).join(\"&nbsp;\");","\t\t\t\t}","\t\t\t}","\t\t\t// add the stuff to navigation buttons","\t\t\tnavigationButtons = \"<center>\" + min + middle + max + \"</center>\";","\t\t}","\t\t// add the navigation buttons to the popup","\t\tuser.lastTradeCommand = \"/viewcardtrades \" + target;","\t\ttradeScreen += navigationButtons;","\t\tuser.popup(tradeScreen);","\t},","","\ttradeaction: function (target, room, user) {","\t\tif (!target) return false; // due to the complexity of the command, this should only be used through the viewtrades screen","\t\tlet parts = target.split(\",\").map(p => p.trim());","\t\tlet action = toId(parts.shift());","\t\tconst backButton = '<button name=\"send\" value=\"' + (user.lastTradeCommand || '/viewcardtrades') + '\" style=\"background-color:aliceblue;height:30px\">< Back</button><br /><br />';","\t\tconst tradeError = \"|html|\" + backButton + '<center><font color=\"red\"><b>ERROR: Invalid Trade / You cannot accept your own trade request!</b></font><center>';","\t\tlet trade;","\t\tswitch (action) {","\t\tcase 'confirmaccept':","\t\tcase 'accept':","\t\t\tif (!parts[0]) return false;","\t\t\tif (action === \"accept\") {","\t\t\t\t// make the user confirm the decision","\t\t\t\t// build a back button","\t\t\t\treturn user.popup(\"|html|\" + backButton + // back button","\t\t\t\t'<center><button name=\"send\" value=\"/tradeaction confirmaccept, ' + parts[0] + '\" style=\"background-color:red;height:65px;width:150px\"><b>Confirm Trade</b></button></center>');","\t\t\t}","\t\t\t// finalize trade","\t\t\t// get the trade","\t\t\ttrade = Db('cardtrades').get(parts[0], null);","\t\t\tif (!trade) return user.popup(tradeError);","","\t\t\t// check if the trade involves the user","\t\t\tlet accepter, otherTarget;","\t\t\tif (trade.to === user.userid) {","\t\t\t\taccepter = \"to\";","\t\t\t\totherTarget = \"from\";","\t\t\t} else {","\t\t\t\t// user has no say in this trade","\t\t\t\treturn user.popup(tradeError);","\t\t\t}","","\t\t\tlet match;","\t\t\t// now double check that both users still have those cards","\t\t\t// check user first","\t\t\tmatch = false;","\t\t\tlet userCards = Db('cards').get(user.userid, []);","\t\t\tfor (let i = 0; i < userCards.length; i++) {","\t\t\t\tif (userCards[i].title === trade[accepter + \"Exchange\"]) {","\t\t\t\t\tmatch = true;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","","\t\t\tif (!match) return this.parse('/tradeaction forcecancel, ' + trade.id);","","\t\t\t// check target","\t\t\tmatch = false;","\t\t\tlet targetCards = Db('cards').get(trade[otherTarget], []);","\t\t\tfor (let i = 0; i < targetCards.length; i++) {","\t\t\t\tif (targetCards[i].title === trade[otherTarget + \"Exchange\"]) {","\t\t\t\t\tmatch = true;","\t\t\t\t\tbreak;","\t\t\t\t}","\t\t\t}","\t\t\tif (!match) return this.parse('/tradeaction forcecancel, ' + trade.id);","","\t\t\t// now go ahead with the trade!","\t\t\t// for \"from\" first","\t\t\taddCard(trade.from, trade.toExchange);","\t\t\tremoveCard(trade.fromExchange, trade.from);","","\t\t\t// apply the actions to \"to\"","\t\t\taddCard(trade.to, trade.fromExchange);","\t\t\tremoveCard(trade.toExchange, trade.to);","","\t\t\t// update points","\t\t\tDb('points').set(trade.to, getPointTotal(trade.to));","\t\t\tDb('points').set(trade.from, getPointTotal(trade.from));","","\t\t\t// remove the trade","\t\t\tDb('cardtrades').delete(parts[0]);","","\t\t\t// on trade success","\t\t\t// send popups to both user and target saying the trade with user was a success","\t\t\t// and a button to view the card they just received","\t\t\tlet targetUsers = [Users.get(trade.to), Users.get(trade.from)];","\t\t\tif (targetUsers[0]) {","\t\t\t\ttargetUsers[0].popup(\"|html|\" + backButton + \"<center>Your trade with \" + trade.from + \" has gone through.\" +","\t\t\t\t\"<br /><button name=\\\"send\\\" value=\\\"/cs card, \" + trade.fromExchange + \"\\\">View Traded Card</button></center>\"); // show card","\t\t\t}","\t\t\tif (targetUsers[1]) {","\t\t\t\ttargetUsers[1].popup(\"|html|<center>Your trade with \" + trade.to + \" has gone through.\" +","\t\t\t\t\"<br /><button name=\\\"send\\\" value=\\\"/cs card, \" + trade.toExchange + \"\\\">View Traded Card</button></center>\");","\t\t\t}","","\t\t\t// log trades and delete the data from list of trades.","\t\t\tlet now = Date.now().toString();","\t\t\tDb('completedTrades').set(now, trade);","\t\t\tbreak;","\t\tcase 'forcecancel':","\t\tcase 'cancel':","\t\tcase 'reject':","\t\t\tif (!parts[0]) return false;","\t\t\t// check for trade","\t\t\ttrade = Db('cardtrades').get(parts[0], null);","","\t\t\tif (!trade) return user.popup(tradeError);","","\t\t\t// additional consts","\t\t\tconst popupText = {","\t\t\t\tforcecancel: \"The trade has automatically been cancelled as one of the participants does not have that card anymore.\",","\t\t\t\tcancel: \"You have cancelled the trade\",","\t\t\t};","","\t\t\t// check if user is involved","\t\t\tif (trade.from === user.userid || trade.to === user.userid) {","\t\t\t\t// check that the action is correct","\t\t\t\tif (trade.from === user.userid && action === \"reject\") action = \"cancel\";","\t\t\t\tif (trade.to === user.userid && action !== \"reject\" && action !== \"forcecancel\") action = \"reject\";","\t\t\t} else {","\t\t\t\treturn user.popup(tradeError);","\t\t\t}","","\t\t\t// remove the trade","\t\t\tDb('cardtrades').delete(parts[0]);","","\t\t\t// letting the users involved know","\t\t\tlet targetUser;","\t\t\tif (action === \"reject\") {","\t\t\t\ttargetUser = Users.get(trade.from);","\t\t\t\tif (targetUser) targetUser.popup(\"Your trade request with \" + user.userid + \" was rejected\");","\t\t\t\tuser.popup(\"|html|\" + backButton + \"You have rejected \" + trade.from + \"'s trade request.\");","\t\t\t} else {","\t\t\t\tuser.popup(\"|html|\" + backButton + popupText[action]);","\t\t\t}","\t\t\tbreak;","\t\t}","\t},","","\tconfirmtransfercard: 'transfercard',","\ttransfercard: function (target, room, user, connection, cmd) {","\t\tif (!target) return this.errorReply(\"/transfercard [user], [card ID]\");","\t\tif (toId(target) === user) return this.errorReply(\"You cannot transfer cards to yourself.\");","\t\tlet parts = target.split(\",\").map(p => toId(p));","\t\t// find targetUser and the card being transfered.","\t\tlet targetUser = parts.shift();","\t\tlet card = parts[0];","\t\tif (!targetUser || !card) return this.errorReply(\"/transfercard [user], [card ID]\");","","\t\tif (cmd === \"transfercard\") {","\t\t\treturn user.popup('|html|<center><button name=\"send\" value=\"/confirmtransfercard ' + target + '\" style=\"background-color:red;height:65px;width:150px\"><b><font color=\"white\" size=3>Confirm Transfer to ' + targetUser + '</font></b></button>');","\t\t}","\t\t// check if card can been removed","\t\tlet canTransfer = removeCard(card, user.userid);","\t\tif (!canTransfer) return user.popup(\"Invalid card.\");","\t\t// complete transfer","\t\taddCard(targetUser, card);","","\t\tDb('points').set(targetUser, getPointTotal(targetUser));","\t\tDb('points').set(user.userid, getPointTotal(user.userid));","","\t\t// build transfer profile","\t\tlet newTransfer = {","\t\t\tfrom: user.userid,","\t\t\tto: targetUser,","\t\t\ttransfer: card,","\t\t};","\t\t// log it","\t\tlet now = Date.now().toString();","\t\tDb('completedTrades').set(now, newTransfer);","\t\tuser.popup(\"You have successfully transfered \" + card + \" to \" + targetUser + \".\");","\t},","","\tconfirmtransferallcards: 'transferallcards',","\ttransferallcards: function (target, room, user, connection, cmd) {","\t\tif (!target) return this.errorReply(\"/transferallcards [user]\");","\t\tif (toId(target) === user) return this.errorReply(\"You cannot transfer cards to yourself.\");","\t\tlet targetUser = toId(target);","\t\tif (!targetUser) return this.errorReply(\"/transferallcards [user]\");","\t\tlet userCards = Db('cards').get(user.userid, []);","\t\tlet targetCards = Db('cards').get(targetUser, []);","","\t\tif (!userCards.length) return this.errorReply(\"You don't have any cards.\");","","\t\t// confirmation","\t\tif (cmd === \"transferallcards\") {","\t\t\treturn user.popup('|html|<center><button name=\"send\" value=\"/confirmtransferallcards ' + target + '\" style=\"background-color:red;height:65px;width:150px\"><b><font color=\"white\" size=3>Confirm Transfer to ' + targetUser + '</font></b></button>');","\t\t}","","\t\t// now the real work","\t\tDb('cards').set(targetUser, targetCards.concat(userCards));","\t\tDb('cards').set(user.userid, []);","","\t\tDb('points').set(targetUser, getPointTotal(targetUser));","\t\tDb('points').set(user.userid, getPointTotal(user.userid));","","\t\tuser.popup(\"You have transfered all your cards to \" + targetUser + \".\");","","\t\tlet newTransfer = {","\t\t\tfrom: user.userid,","\t\t\tto: targetUser,","\t\t\ttransfer: \"all\",","\t\t};","","\t\tlet now = Date.now().toString();","\t\tDb('completedTrades').set(now, newTransfer);","\t},","","\tpsgo: 'cardshelp',","\tcardshelp: function (target, room, user) {","\t\tif (!this.runBroadcast()) return;","\t\treturn this.sendReplyBox(\"<center><b><u>PS Trading Card Game:</u></b></center><br>\" +","\t\t\t\"<b>/buypack</b> - Buys a pack from the pack shop.<br>\" +","\t\t\t\"<b>/packshop</b> - Shows the shop for buying packs.<br>\" +","\t\t\t\"<b>/openpack</b> - Opens a pack that has been purchased from the shop.<br>\" +","\t\t\t\"<b>/packs</b> - Shows a display of all your unopened packs.<br>\" +","\t\t\t\"<b>/showcase</b> - Shows a display of all cards that you have.<br>\" +","\t\t\t\"<b>/card</b> - Shows data and information on any specifc card.<br>\" +","\t\t\t\"<b>/cardladder</b> - Shows the leaderboard of the users with the most card points.<br>\" +","\t\t\t\"<b>/cardsearch</b> - Opens a window allowing you to search through all the cards.<br>\" +","\t\t\t\"<b>/trade</b> - /trade [user\\'s card], [targetUser], [targetUser\\'s card] - starts a new trade request.<br>\" +","\t\t\t\"<b>/trades</b> - View your current pending trade requests.<br>\" +","\t\t\t\"<b>/transfercard</b> - /transfercard [targetUser], [card] - transfers a card to the target user.<br>\" +","\t\t\t\"<b>/transferallcards</b> - /transferallcards [user] - transfers all of your cards to the target user.<br>\"","\t\t);","\t},","","\tgivecard: 'spawncard',","\tspawncard: function (target, room, user, connection, cmd) {","\t\tif (!this.can('declare')) return false;","\t\tif (!target) return this.errorReply(\"/givecard [user], [card ID]\");","\t\tlet parts = target.split(\",\").map(p => toId(p));","\t\t// find targetUser and the card being given.","\t\tlet targetUser = parts.shift();","\t\tlet card = parts[0].trim();","\t\tif (!targetUser || !card) return this.errorReply(\"/givecard [user], [card ID]\");","\t\tif (!cards.hasOwnProperty(card)) return this.sendReply(target + \": card not found.\");","\t\t//Give the card to the user.","\t\tcard = cards[card];","\t\taddCard(targetUser, card.title);","\t\tuser.popup(\"You have successfully given \" + card.name + \" to \" + targetUser + \".\");","\t\tthis.logModCommand(user.name + \"gave the card '\" + card.name + \"' to \" + targetUser + \".\");","\t},","","\ttakecard: function (target, room, user, connection, cmd) {","\t\tif (!this.can('declare')) return false;","\t\tif (!target) return this.errorReply(\"/takecard [user], [card ID]\");","\t\tlet parts = target.split(\",\").map(p => toId(p));","\t\t// find targetUser and the card being taken.","\t\tlet targetUser = parts.shift();","\t\tlet card = parts[0].trim();","\t\tif (!targetUser || !card) return this.errorReply(\"/takecard [user], [card ID]\");","\t\tif (!cards.hasOwnProperty(card)) return this.sendReply(target + \": card not found.\");","\t\t//Take the card from the user.","\t\tcard = cards[card];","\t\tremoveCard(card.title, targetUser);","\t\tuser.popup(\"You have successfully taken \" + card.name + \" from \" + targetUser + \".\");","\t\tthis.logModCommand(user.name + \" took the card '\" + card.name + \"' from \" + targetUser + \".\");","\t},","};"]}]]},"ace":{"folds":[],"scrolltop":12723,"scrollleft":0,"selection":{"start":{"row":936,"column":2},"end":{"row":936,"column":2},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":94,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1467747921717,"hash":"2ffa432b9e093fa10ec9d495faf4ddbdf5f2069d"}